30/06/25
# 316 Remove Duplicate Letters:
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        last_index = {}
        for i in range(len(s)):
            last_index[s[i]] = i

        result = []
        seen = set()

        for i in range(len(s)):
            c = s[i]
            if c not in seen:
                while result and c < result[-1] and i < last_index[result[-1]]:
                    seen.remove(result.pop())
                result.append(c)
                seen.add(c)

        return ''.join(result)
01/07/25
# 321. Create Maximum Number
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
        def maxSubsequence(nums, t):
            stack = []
            drop = len(nums) - t
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:t]

        def merge(seq1, seq2):
            res = []
            while seq1 or seq2:
                if seq1 > seq2:
                    res.append(seq1.pop(0))
                else:
                    res.append(seq2.pop(0))
            return res

        best = []
        for i in range(max(0, k - len(nums2)), min(k, len(nums1)) + 1):
            seq1 = maxSubsequence(nums1, i)
            seq2 = maxSubsequence(nums2, k - i)
            merged = merge(seq1[:], seq2[:]) 
            if merged > best:
                best = merged
        return best
02/07/25
#3333. Find the Original Typed String II
class Solution:
    MOD = 10**9 + 7

    def possibleStringCount(self, word: str, k: int) -> int:
        if not word:
            return 0

        groups = []
        count = 1
        for i in range(1, len(word)):
            if word[i] == word[i - 1]:
                count += 1
            else:
                groups.append(count)
                count = 1
        groups.append(count)

        total = 1
        for num in groups:
            total = (total * num) % self.MOD

        if k <= len(groups):
            return total

        dp = [0] * k
        dp[0] = 1

        for num in groups:
            new_dp = [0] * k
            sum_val = 0
            for s in range(k):
                if s > 0:
                    sum_val = (sum_val + dp[s - 1]) % self.MOD
                if s > num:
                    sum_val = (sum_val - dp[s - num - 1] + self.MOD) % self.MOD
                new_dp[s] = sum_val
            dp = new_dp

        invalid = sum(dp[len(groups):k]) % self.MOD
        return (total - invalid + self.MOD) % self.MOD
#324. Wiggle Sort II
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: None. Modifies nums in-place.
        """
        n = len(nums)
        nums.sort()

        half = (n + 1) // 2
        small = nums[:half][::-1]  
        large = nums[half:][::-1] 

        for i in range(n):
            if i % 2 == 0:
                nums[i] = small[i // 2]
            else:
                nums[i] = large[i // 2]
03/07
# 3304. Find the K-th Character in String Game I
class Solution(object):
    def kthCharacter(self, k):
        """
        :type k: int
        :rtype: str
        """
        word = "a"
        
        while len(word) < k:
            next_part = ""
            for c in word:
                next_char = chr((ord(c) - ord('a') + 1) % 26 + ord('a'))
                next_part += next_char
            word += next_part
        
        return word[k - 1]

04/07
# 334. Increasing Triplet Subsequence
class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        first = float('inf')
        second = float('inf')

        for num in nums:
            if num <= first:
                first = num  
            elif num <= second:
                second = num  
            else:
                return True

        return False
# 376. Wiggle Subsequence
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0

        n = len(nums)
        up = 1
        down = 1

        for i in range(1, n):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1

        return max(up, down)
05/07
# 1394. Find Lucky Integer in an Array
class Solution(object):
    def findLucky(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        from collections import Counter

        freq = Counter(arr)
        result = -1

        for num in freq:
            if freq[num] == num:
                result = max(result, num)

        return result
06/07
# 1865. Finding Pairs With a Certain Sum
from collections import Counter

class FindSumPairs(object):

    def __init__(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        """
        self.nums1 = nums1
        self.nums2 = nums2
        self.freq2 = Counter(nums2)

    def add(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        old_val = self.nums2[index]
        self.freq2[old_val] -= 1
        if self.freq2[old_val] == 0:
            del self.freq2[old_val]
        
        self.nums2[index] += val
        new_val = self.nums2[index]
        self.freq2[new_val] += 1

    def count(self, tot):
        """
        :type tot: int
        :rtype: int
        """
        count = 0
        for num in self.nums1:
            complement = tot - num
            count += self.freq2.get(complement, 0)
        return count

07/05
# 397. Integer Replacement
class Solution(object):
    def integerReplacement(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo = {}

        def helper(x):
            if x == 1:
                return 0
            if x in memo:
                return memo[x]
            if x % 2 == 0:
                memo[x] = 1 + helper(x // 2)
            else:
                memo[x] = 1 + min(helper(x + 1), helper(x - 1))
            return memo[x]

        return helper(n)

# 402. Remove K Digits
class Solution(object):
    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        stack = []

        for digit in num:
            while stack and k > 0 and stack[-1] > digit:
                stack.pop()
                k -= 1
            stack.append(digit)
        while k > 0:
            stack.pop()
            k -= 1
        result = ''.join(stack).lstrip('0')

        return result if result else "0"

# 409. Longest Palindrome  
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        from collections import Counter

        count = Counter(s)
        length = 0
        odd_found = False

        for freq in count.values():
            if freq % 2 == 0:
                length += freq
            else:
                length += freq - 1
                odd_found = True

        if odd_found:
            length += 1  

        return length

08/07
# 1751. Maximum Number of Events That Can Be Attended II
class Solution(object):
    def maxValue(self, events, k):
        """
        :type events: List[List[int]]
        :type k: int
        :rtype: int
        """
        events.sort()
        n = len(events)

        # Sort events by start time
        starts = [event[0] for event in events]

        next_event = [0] * n
        for i in range(n):
            lo, hi = i + 1, n
            while lo < hi:
                mid = (lo + hi) // 2
                if events[mid][0] > events[i][1]:
                    hi = mid
                else:
                    lo = mid + 1
            next_event[i] = lo

        dp = [[0] * (k + 1) for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            for j in range(1, k + 1):
                # Skip current event
                skip = dp[i + 1][j]
                # Take current event
                take = events[i][2] + dp[next_event[i]][j - 1]
                dp[i][j] = max(skip, take)

        return dp[0][k]

09/07
# 3439. Reschedule Meetings for Maximum Free Time I

class Solution(object):
    def maxFreeTime(self, eventTime, k, startTime, endTime):
        """
        :type eventTime: int
        :type k: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        gap = [0] * (n + 1)

        
        gap[0] = startTime[0]

        
        for i in range(1, n):
            gap[i] = startTime[i] - endTime[i - 1]


        gap[n] = eventTime - endTime[n - 1]

        
        cur_gap = sum(gap[i] for i in range(min(k + 1, n + 1)))
        max_gap = cur_gap

    
        for i in range(k + 1, n + 1):
            cur_gap += gap[i] - gap[i - k - 1]
            max_gap = max(max_gap, cur_gap)

        return max_gap
10/07
# 3440. Reschedule Meetings for Maximum Free Time II
class Solution(object):
    def maxFreeTime(self, eventTime, startTime, endTime):
        """
        :type eventTime: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        
        gaps = [0] * (n + 1)
        gaps[0] = startTime[0]
        for i in range(1, n):
            gaps[i] = startTime[i] - endTime[i - 1]
        gaps[n] = eventTime - endTime[n - 1]

        maxLeft = [0] * (n + 1)
        maxLeft[0] = gaps[0]
        for i in range(1, n + 1):
            maxLeft[i] = max(maxLeft[i - 1], gaps[i])

        maxRight = [0] * (n + 1)
        maxRight[n] = gaps[n]
        for i in range(n - 1, -1, -1):
            maxRight[i] = max(maxRight[i + 1], gaps[i])

        res = 0
        for i in range(n):
            duration = endTime[i] - startTime[i]
            gap_sum = gaps[i] + gaps[i + 1]

            bestGap = 0
            if i > 0:
                bestGap = max(bestGap, maxLeft[i - 1])
            if i + 2 <= n:
                bestGap = max(bestGap, maxRight[i + 2])

            if duration <= bestGap:
                res = max(res, gap_sum + duration)
            else:
                res = max(res, gap_sum)

        return res
11/07
# 2402. Meeting Rooms III
import heapq

class Solution:
    def mostBooked(self, n, meetings):
        meetings.sort()
        free_rooms = list(range(n))
        busy_rooms = []
        count = [0] * n
        
        for start, end in meetings:
            while busy_rooms and busy_rooms[0][0] <= start:
                _, room = heapq.heappop(busy_rooms)
                heapq.heappush(free_rooms, room)
            
            if free_rooms:
                room = heapq.heappop(free_rooms)
            else:
                end_time, room = heapq.heappop(busy_rooms)
                end += end_time - start
            
            heapq.heappush(busy_rooms, (end, room))
            count[room] += 1
        
        max_booked = max(count)
        for i in range(n):
            if count[i] == max_booked:
                return i
12/07
# 1900. The Earliest and Latest Rounds Where Players Compete

class Solution(object):
    def earliestAndLatest(self, n, firstPlayer, secondPlayer):
        """
        :type n: int
        :type firstPlayer: int
        :type secondPlayer: int
        :rtype: List[int]
        """
        memo = {}

        def dfs(players):
            key = tuple(players)
            if key in memo:
                return memo[key]

            left, right = 0, len(players) - 1
            while left < right:
                a, b = players[left], players[right]
                if (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return (1, 1)
                left += 1
                right -= 1

            results = []
            def build_next(i, j, new_players):
                if i > j:
                    results.append(tuple(sorted(new_players)))
                    return
                if i == j:
                    build_next(i + 1, j - 1, new_players + [players[i]])
                    return

                a, b = players[i], players[j]
                if (a == firstPlayer or a == secondPlayer) and (b != firstPlayer and b != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [a])
                elif (b == firstPlayer or b == secondPlayer) and (a != firstPlayer and a != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [b])
                elif (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return
                else:
                    build_next(i + 1, j - 1, new_players + [a])
                    build_next(i + 1, j - 1, new_players + [b])

            build_next(0, len(players) - 1, [])

            earliest = float('inf')
            latest = float('-inf')
            for nxt in results:
                e, l = dfs(nxt)
                earliest = min(earliest, e + 1)
                latest = max(latest, l + 1)

            memo[key] = (earliest, latest)
            return memo[key]

        return list(dfs(tuple(range(1, n + 1))))
13/07
# 2410. Maximum Matching of Players With Trainers

class Solution(object):
    def matchPlayersAndTrainers(self, players, trainers):
        """
        :type players: List[int]
        :type trainers: List[int]
        :rtype: int
        """
        players.sort()
        trainers.sort()
        
        i = j = 0
        match_count = 0

        while i < len(players) and j < len(trainers):
            if players[i] <= trainers[j]:
                match_count += 1
                i += 1
                j += 1
            else:
                j += 1

        return match_count
14/07
# 1290. Convert Binary Number in a Linked List to Integer

class Solution(object):
    def getDecimalValue(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: int
        """
        num = 0
        while head:
            num = (num << 1) | head.val  
            head = head.next
        return num
15/07
# 3136. Valid Word
class Solution(object):
    def isValid(self, word):
        """
        :type word: str
        :rtype: bool
        """
        if len(word) < 3:
            return False

        vowels = set('aeiouAEIOU')
        has_vowel = False
        has_consonant = False

        for char in word:
            if not char.isalnum():
                return False
            if char.isalpha():
                if char in vowels:
                    has_vowel = True
                else:
                    has_consonant = True

        return has_vowel and has_consonant
16/07
# 3201. Find the Maximum Length of Valid Subsequence I
class Solution(object):
    def maximumLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        cnt_even = cnt_odd = 0     
        dp_even  = dp_odd  = 0     
        
        for num in nums:
            if num & 1:            
                cnt_odd += 1
                dp_odd  = max(dp_odd, dp_even + 1)
            else:                  
                cnt_even += 1
                dp_even = max(dp_even, dp_odd + 1)
        
        len_same = max(cnt_even, cnt_odd)     
        len_alt  = max(dp_even, dp_odd)       
        
        return max(len_same, len_alt)
17/07
# 3202. Find the Maximum Length of Valid Subsequence II
 class Solution(object):
    def maximumLength(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(nums)
        dp = [{} for _ in range(n)]
        max_len = 1  

        for i in range(n):
            for j in range(i):
                r = (nums[j] + nums[i]) % k
                prev_len = dp[j].get(r, 1)  
                dp[i][r] = max(dp[i].get(r, 1), prev_len + 1)
                max_len = max(max_len, dp[i][r])

        return max_len

18/07
# 2163. Minimum Difference in Sums After Removal of Elements
import heapq

class Solution(object):
    def minimumDifference(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums) // 3
        total_len = len(nums)
        
        max_heap = []
        prefix_sum = [0] * total_len
        curr_sum = sum(nums[:n])
        heapq.heapify(max_heap)
        for i in range(n):
            heapq.heappush(max_heap, -nums[i])
        prefix_sum[n - 1] = curr_sum
        
        for i in range(n, 2 * n):
            curr_sum += nums[i]
            heapq.heappush(max_heap, -nums[i])
            curr_sum += heapq.heappop(max_heap)
            prefix_sum[i] = curr_sum
        
        min_heap = []
        suffix_sum = [0] * total_len
        curr_sum = sum(nums[-n:])
        heapq.heapify(min_heap)
        for i in range(total_len - 1, total_len - n - 1, -1):
            heapq.heappush(min_heap, nums[i])
        suffix_sum[2 * n] = curr_sum
        
        for i in range(2 * n - 1, n - 1, -1):
            curr_sum += nums[i]
            heapq.heappush(min_heap, nums[i])
            curr_sum -= heapq.heappop(min_heap)
            suffix_sum[i] = curr_sum
        
        min_diff = float('inf')
        for i in range(n - 1, 2 * n):
            min_diff = min(min_diff, prefix_sum[i] - suffix_sum[i + 1])
        
        return min_diff
# 420. Strong Password Checker
class Solution(object):
    def strongPasswordChecker(self, password):
        """
        :type password: str
        :rtype: int
        """
        missing_lower = 1
        missing_upper = 1
        missing_digit = 1

        for c in password:
            if c.islower():
                missing_lower = 0
            elif c.isupper():
                missing_upper = 0
            elif c.isdigit():
                missing_digit = 0

        missing_types = missing_lower + missing_upper + missing_digit
        n = len(password)

        repeats = []
        i = 2
        while i < n:
            if password[i] == password[i - 1] == password[i - 2]:
                start = i - 2
                while i < n and password[i] == password[i - 1]:
                    i += 1
                repeats.append(i - start)
            else:
                i += 1

        total_replace = sum(length // 3 for length in repeats)

        if n < 6:
            return max(missing_types, 6 - n)

        elif n <= 20:
            return max(missing_types, total_replace)

        over = n - 20
        remaining_replace = total_replace
        buckets = [0] * 3

        for r in repeats:
            buckets[r % 3] += 1
        for i in range(3):
            if i == 0:
                usable = min(over, buckets[0])
                over -= usable
                remaining_replace -= usable
                buckets[0] -= usable
            elif i == 1:
                usable = min(over // 2, buckets[1])
                over -= usable * 2
                remaining_replace -= usable
                buckets[1] -= usable
            elif i == 2:
                usable = min(over // 3, buckets[2])
                over -= usable * 3
                remaining_replace -= usable
                buckets[2] -= usable

        remaining_replace = max(0, remaining_replace - over // 3)

        return (n - 20) + max(missing_types, remaining_replace)

19/07
# 1233. Remove Sub-Folders from the Filesystem
class Solution(object):
    def removeSubfolders(self, folder):
        """
        :type folder: List[str]
        :rtype: List[str]
        """
        folder.sort()
        result = []

        for f in folder:
            if not result or not f.startswith(result[-1] + "/"):
                result.append(f)

        return result
20/07
# 1948. Delete Duplicate Folders in System
from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.children = {}
        self.path = []
        self.serial = ""
        self.to_delete = False

class Solution(object):
    def deleteDuplicateFolder(self, paths):
        """
        :type paths: List[List[str]]
        :rtype: List[List[str]]
        """
        root = TrieNode()
        
        for path in paths:
            node = root
            for folder in path:
                if folder not in node.children:
                    node.children[folder] = TrieNode()
                node = node.children[folder]
            node.path = path
        
        serial_map = defaultdict(list)
        
        def serialize(node):
            if not node.children:
                return ""
            items = []
            for name in sorted(node.children):
                child = node.children[name]
                items.append(name + '(' + serialize(child) + ')')
            node.serial = ''.join(items)
            serial_map[node.serial].append(node)
            return node.serial
        
        serialize(root)

        for nodes in serial_map.values():
            if len(nodes) > 1:
                for node in nodes:
                    node.to_delete = True
        
        res = []
        def collect(node, path):
            for name, child in node.children.items():
                if not child.to_delete:
                    new_path = path + [name]
                    res.append(new_path)
                    collect(child, new_path)
        
        collect(root, [])
        return res
# 435. Non-overlapping Intervals

class Solution(object):
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        if not intervals:
            return 0

        intervals.sort(key=lambda x: x[1])

        count_non_overlapping = 1  
        end = intervals[0][1]

        for i in range(1, len(intervals)):
            if intervals[i][0] >= end:
                count_non_overlapping += 1
                end = intervals[i][1]
        return len(intervals) - count_non_overlapping

21/07
# 1957. Delete Characters to Make Fancy String
class Solution(object):
    def makeFancyString(self, s):
        """
        :type s: str
        :rtype: str
        """
        result = []
        count = 1  

        for i in range(len(s)):
            if i > 0 and s[i] == s[i - 1]:
                count += 1
            else:
                count = 1
            if count < 3:
                result.append(s[i])

        return "".join(result)
22/07
# 1695. Maximum Erasure Value

class Solution(object):
    def maximumUniqueSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        seen = set()
        left = 0
        current_sum = 0
        max_sum = 0

        for right in range(len(nums)):
            while nums[right] in seen:
                seen.remove(nums[left])
                current_sum -= nums[left]
                left += 1
            seen.add(nums[right])
            current_sum += nums[right]
            max_sum = max(max_sum, current_sum)
        
        return max_sum

23/07
# 1717. Maximum Score From Removing Substrings

class Solution(object):
    def maximumGain(self, s, x, y):
        """
        :type s: str
        :type x: int
        :type y: int
        :rtype: int
        """

        def remove_pair(s, first, second, score):
            stack = []
            total = 0
            for ch in s:
                if stack and stack[-1] == first and ch == second:
                    stack.pop()
                    total += score
                else:
                    stack.append(ch)
            return "".join(stack), total

        if x > y:
            s, gain1 = remove_pair(s, 'a', 'b', x)
            s, gain2 = remove_pair(s, 'b', 'a', y)
        else:
            s, gain1 = remove_pair(s, 'b', 'a', y)
            s, gain2 = remove_pair(s, 'a', 'b', x)

        return gain1 + gain2

24/07
# 2322. Minimum Score After Removals on a Tree
class Solution(object):
    def minimumScore(self, nums, edges):
        """
        :type nums: List[int]
        :type edges: List[List[int]]
        :rtype: int
        """
        from collections import defaultdict

        n = len(nums)
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        parent = [-1] * n
        xor = nums[:]
        def dfs(node, par):
            for nei in graph[node]:
                if nei != par:
                    parent[nei] = node
                    dfs(nei, node)
                    xor[node] ^= xor[nei]
        dfs(0, -1)

        in_time = [0] * n
        out_time = [0] * n
        time = [0]
        def dfs_time(node, par):
            time[0] += 1
            in_time[node] = time[0]
            for nei in graph[node]:
                if nei != par:
                    dfs_time(nei, node)
            time[0] += 1
            out_time[node] = time[0]
        dfs_time(0, -1)

        def is_ancestor(u, v):
            return in_time[u] < in_time[v] and out_time[v] < out_time[u]

        answer = float('inf')
        edge_nodes = [v if parent[v] == u else u for u, v in edges]
        for i in range(len(edge_nodes)):
            for j in range(i + 1, len(edge_nodes)):
                a, b = edge_nodes[i], edge_nodes[j]
                if is_ancestor(a, b):
                    comp1 = xor[b]
                    comp2 = xor[a] ^ xor[b]
                    comp3 = xor[0] ^ xor[a]
                elif is_ancestor(b, a):
                    comp1 = xor[a]
                    comp2 = xor[b] ^ xor[a]
                    comp3 = xor[0] ^ xor[b]
                else:
                    comp1 = xor[a]
                    comp2 = xor[b]
                    comp3 = xor[0] ^ xor[a] ^ xor[b]
                values = [comp1, comp2, comp3]
                answer = min(answer, max(values) - min(values))
        return answer
# 452. Minimum Number of Arrows to Burst Balloons 

class Solution(object):
    def findMinArrowShots(self, points):
        if not points:
            return 0

        points.sort(key=lambda x: x[1])

        arrows = 1
        end = points[0][1]

        for i in range(1, len(points)):
            if points[i][0] > end:
                arrows += 1
                end = points[i][1]

        return arrows

# 455. Assign Cookies

class Solution(object):
    def findContentChildren(self, g, s):
        """
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """
        g.sort()
        s.sort()

        child = 0  
        cookie = 0 

        while child < len(g) and cookie < len(s):
            if s[cookie] >= g[child]:  
                child += 1  
            cookie += 1  

        return child  

# 502. IPO

import heapq

class Solution(object):
    def findMaximizedCapital(self, k, w, profits, capital):
        # Pair up capital and profits
        projects = sorted(zip(capital, profits))
        n = len(projects)
        max_heap = []
        i = 0

        for _ in range(k):
            while i < n and projects[i][0] <= w:
                heapq.heappush(max_heap, -projects[i][1])
                i += 1

            if not max_heap:
                break

            w += -heapq.heappop(max_heap)

        return w

# 517. Super Washing Machines

class Solution(object):
    def findMinMoves(self, machines):
        """
        :type machines: List[int]
        :rtype: int
        """
        total = sum(machines)
        n = len(machines)

        if total % n != 0:
            return -1
        
        target = total // n
        cum_sum = 0
        max_moves = 0

        for load in machines:
            diff = load - target  
            cum_sum += diff      
            max_moves = max(max_moves, abs(cum_sum), diff)

        return max_moves
25/07
# 3487. Maximum Unique Subarray Sum After Deletion

class Solution:
    def maxSum(self, nums):
        s = set(nums)
        result = sum(x for x in s if x > 0)
        if result == 0:
            result = max(s)
        return result

26/07
# 3480. Maximize Subarrays After Removing One Conflicting Pair

class Solution(object):
    def maxSubarrays(self, n, conflictingPairs):
        """
        :type n: int
        :type conflictingPairs: List[List[int]]
        :rtype: int
        """
        right = [[] for _ in range(n + 1)]

        for a, b in conflictingPairs:
            right[max(a, b)].append(min(a, b))

        ans = 0
        left = [0, 0]  
        bonus = [0] * (n + 1)

        for r in range(1, n + 1):
            for l in right[r]:
                left = self.maxPair(left, [l, left[0]], [left[0], l])
            ans += r - left[0]
            bonus[left[0]] += left[0] - left[1]

        return ans + max(bonus)

    def maxPair(self, pair1, pair2, pair3):
        max_pair = pair1
        for curr in [pair2, pair3]:
            if curr[0] > max_pair[0] or (curr[0] == max_pair[0] and curr[1] > max_pair[1]):
                max_pair = curr
        return max_pair

27/07
# 2210. Count Hills and Valleys in an Array

class Solution(object):
    def countHillValley(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        filtered = [nums[0]]
        for i in range(1, len(nums)):
            if nums[i] != nums[i - 1]:
                filtered.append(nums[i])
        
        count = 0
        for i in range(1, len(filtered) - 1):
            if filtered[i] > filtered[i - 1] and filtered[i] > filtered[i + 1]:
                count += 1  
            elif filtered[i] < filtered[i - 1] and filtered[i] < filtered[i + 1]:
                count += 1  
        
        return count

# 561. Array Partition

class Solution(object):
    def arrayPairSum(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        max_sum = 0
        for i in range(0, len(nums), 2):
            max_sum += nums[i]
        return max_sum

# 581. Shortest Unsorted Continuous Subarray

class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        sorted_nums = sorted(nums)
        start, end = 0, len(nums) - 1

        while start < len(nums) and nums[start] == sorted_nums[start]:
            start += 1
        
        while end > start and nums[end] == sorted_nums[end]:
            end -= 1

        return end - start + 1 if end > start else 0

28/07
# 2044. Count Number of Maximum Bitwise-OR Subsets

class Solution(object):
    def countMaxOrSubsets(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        max_or = 0
        for num in nums:
            max_or |= num  
        self.count = 0  

        def dfs(index, current_or):
            if index == len(nums):
                if current_or == max_or:
                    self.count += 1
                return

            dfs(index + 1, current_or | nums[index])

            dfs(index + 1, current_or)

        dfs(0, 0)
        return self.count
29/07
# 2411. Smallest Subarrays With Maximum Bitwise OR

class Solution(object):
    def smallestSubarrays(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        n = len(nums)
        answer = [1] * n
        last = [0] * 32

        for i in range(n - 1, -1, -1):
            for b in range(32):
                if nums[i] & (1 << b):
                    last[b] = i

            farthest = i
            for b in range(32):
                if last[b] > farthest:
                    farthest = last[b]

            answer[i] = farthest - i + 1

        return answer
30/07
# 2419. Longest Subarray With Maximum Bitwise AND

class Solution(object):
    def longestSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_val = max(nums)
        
        longest = 0
        current = 0
        
        for num in nums:
            if num == max_val:
                current += 1
                longest = max(longest, current)
            else:
                current = 0
        
        return longest
31/07
# 898. Bitwise ORs of Subarrays

class Solution(object):
    def subarrayBitwiseORs(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        result = set()    
        current = set()    
        for num in arr:
            current = {num | x for x in current} | {num}
            result |= current  

        return len(result)
01/08
# 118. Pascal's Triangle

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        triangle = []
        
        for row_num in range(numRows):
            row = [1] * (row_num + 1)
            
            for j in range(1, row_num):
                row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j]
            
            triangle.append(row)
        
        return triangle
02/08
# 2561. Rearranging Fruits

from collections import Counter

class Solution(object):
    def minCost(self, basket1, basket2):
        """
        :type basket1: List[int]
        :type basket2: List[int]
        :rtype: int
        """
        count1 = Counter(basket1)
        count2 = Counter(basket2)
        
        total_count = Counter()
        for k in count1:
            total_count[k] += count1[k]
        for k in count2:
            total_count[k] += count2[k]

        for k in total_count:
            if total_count[k] % 2 != 0:
                return -1

        extra1 = []
        extra2 = []
        for fruit in total_count:
            c1 = count1.get(fruit, 0)
            c2 = count2.get(fruit, 0)
            diff = abs(c1 - c2) // 2
            if c1 > c2:
                extra1.extend([fruit] * diff)
            elif c2 > c1:
                extra2.extend([fruit] * diff)

        if len(extra1) != len(extra2):
            return -1

        extra1.sort()
        extra2.sort(reverse=True)

        min_fruit = min(min(basket1), min(basket2))
        cost = 0
        for a, b in zip(extra1, extra2):
            cost += min(min(a, b), 2 * min_fruit)

        return cost
# 624. Maximum Distance in Arrays

class Solution(object):
    def maxDistance(self, arrays):
        """
        :type arrays: List[List[int]]
        :rtype: int
        """
        min_val = arrays[0][0]
        max_val = arrays[0][-1]
        max_distance = 0

        for i in range(1, len(arrays)):
            curr_min = arrays[i][0]
            curr_max = arrays[i][-1]
            
            max_distance = max(
                max_distance,
                abs(curr_max - min_val),
                abs(max_val - curr_min)
            )

            min_val = min(min_val, curr_min)
            max_val = max(max_val, curr_max)

        return max_distance
# 630. Course Schedule III 

import heapq

class Solution(object):
    def scheduleCourse(self, courses):
        """
        :type courses: List[List[int]]
        :rtype: int
        """
        courses.sort(key=lambda x: x[1])
        
        total_time = 0
        max_heap = []

        for duration, last_day in courses:
            total_time += duration
            heapq.heappush(max_heap, -duration) 

            if total_time > last_day:
                longest = -heapq.heappop(max_heap)
                total_time -= longest

        return len(max_heap)
# 632. Smallest Range Covering Elements from K Lists

import heapq

class Solution(object):
    def smallestRange(self, nums):
        """
        :type nums: List[List[int]]
        :rtype: List[int]
        """
        heap = []
        current_max = float('-inf')

        for i in range(len(nums)):
            val = nums[i][0]
            heapq.heappush(heap, (val, i, 0))
            current_max = max(current_max, val)

        best_range = [float('-inf'), float('inf')]

        while True:
            min_val, row, col = heapq.heappop(heap)

            if current_max - min_val < best_range[1] - best_range[0] or \
               (current_max - min_val == best_range[1] - best_range[0] and min_val < best_range[0]):
                best_range = [min_val, current_max]

            if col + 1 < len(nums[row]):
                next_val = nums[row][col + 1]
                heapq.heappush(heap, (next_val, row, col + 1))
                current_max = max(current_max, next_val)
            else:
                break

        return best_range
03/08
# 2106. Maximum Fruits Harvested After at Most K Steps

class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        vector<int> arr;
        for (int i=0; i<2*k+1; ++i) {
            arr.push_back(0);
        }
        
        for (int i=0; i<fruits.size(); ++i) {
            if ((fruits[i][0] < startPos-k) || (fruits[i][0] > startPos+k)) continue;
            arr[fruits[i][0]-(startPos-k)] += fruits[i][1];
        }
        
        int left = 0, right = 0;
        for (int i = 0; i <= k; ++i) {
            left += arr[i];
            right += arr[k+i];
        }
        int maxSeen = max(left, right);
        int L = arr.size();
        int turn = 1;
        for (int i = 2; i < k+1; i += 2) {
            left = left+arr[k+turn]-arr[i-1]-arr[i-2];
            right = right+arr[k-turn]-arr[L-1-(i-1)]-arr[L-1-(i-2)];
            if (left > maxSeen) maxSeen = left;
            if (right > maxSeen) maxSeen = right;
            turn++;
        }
        return maxSeen;
        
        
    }
};
04/08
# 904. Fruit Into Baskets

class Solution(object):
    def totalFruit(self, fruits):
        """
        :type fruits: List[int]
        :rtype: int
        """
        from collections import defaultdict
        
        basket = defaultdict(int)
        start = 0
        max_fruits = 0

        for end in range(len(fruits)):
            basket[fruits[end]] += 1

            while len(basket) > 2:
                basket[fruits[start]] -= 1
                if basket[fruits[start]] == 0:
                    del basket[fruits[start]]
                start += 1

            max_fruits = max(max_fruits, end - start + 1)

        return max_fruits
05/08
# 3477. Fruits Into Baskets II
class Solution(object):
    def numOfUnplacedFruits(self, fruits, baskets):
        """
        :type fruits: List[int]
        :type baskets: List[int]
        :rtype: int
        """
        n = len(fruits)
        used = [False] * n
        unplaced = 0

        for i in range(n):
            placed = False
            for j in range(n):
                if not used[j] and baskets[j] >= fruits[i]:
                    used[j] = True
                    placed = True
                    break
            if not placed:
                unplaced += 1

        return unplaced
06/08
# 3479. Fruits Into Baskets III

class Solution(object):
    def numOfUnplacedFruits(self, fruits, baskets):
        n = len(fruits)
        seg = [0] * (4 * n + 1)
        def Update(p):
            seg[p] = max(seg[p << 1], seg[p << 1 | 1])
        def Build(p, l, r):
            if l == r:
                seg[p] = baskets[l]
                return
            mid = (l + r) >> 1
            Build(p << 1, l, mid)
            Build(p << 1 | 1, mid + 1, r)
            Update(p)
        def Assign(x, v, p, l, r):
            if x < l or x > r:
                return
            if l == r:
                seg[p] = v
                return
            mid = (l + r) >> 1
            Assign(x, v, p << 1, l, mid)
            Assign(x, v, p << 1 | 1, mid + 1, r)
            Update(p)
        def FirstLarger(v, p, l, r):
            if seg[p] < v:
                return r + 1
            if l == r:
                return r
            mid = (l + r) >> 1
            lf = FirstLarger(v, p << 1, l, mid)
            if lf <= mid:
                return lf
            return FirstLarger(v, p << 1 | 1, mid + 1, r)
        Build(1, 0, n - 1)
        res = 0
        for x in fruits:
            pos = FirstLarger(x, 1, 0, n - 1)
            if pos == n:
                res += 1
            else:
                Assign(pos, 0, 1, 0, n - 1)
        return res
07/08
# 3363. Find the Maximum Number of Fruits Collected

class Solution(object):
    def maxCollectedFruits(self, fruits):
        """
        :type fruits: List[List[int]]
        :rtype: int
        """
        n = len(fruits)
        if n==0: 
            return 0
        total_fruits = sum(fruits[i][i] for i in range(n))
        dp_child2 = [float("-inf")] * n
        dp_child2[n - 1] = fruits[0][n - 1]
        for row in range(1, n - 1):
            next_dp = [float("-inf")] * n
            for col in range(max(n - 1 - row, row + 1), n):
                max_prev_score = dp_child2[col]
                if col > 0:
                    max_prev_score = max(max_prev_score, dp_child2[col - 1])
                if col < n - 1:
                    max_prev_score = max(max_prev_score, dp_child2[col + 1])
                
                if max_prev_score != float("-inf"):
                    next_dp[col] = max_prev_score + fruits[row][col]
            dp_child2 = next_dp
        if n > 1 and dp_child2[n - 1] != float("-inf"):
            total_fruits += dp_child2[n - 1]
        dp_child3 = [float("-inf")] * n
        dp_child3[n - 1] = fruits[n - 1][0]
        for col in range(1, n - 1):
            next_dp = [float("-inf")] * n
            for row in range(max(n - 1 - col, col + 1), n):
                max_prev_score = dp_child3[row]
                if row > 0:
                    max_prev_score = max(max_prev_score, dp_child3[row - 1])
                if row < n - 1:
                    max_prev_score = max(max_prev_score, dp_child3[row + 1])

                if max_prev_score != float("-inf"):
                    next_dp[row] = max_prev_score + fruits[row][col]

            dp_child3 = next_dp
        if n > 1 and dp_child3[n - 1] != float("-inf"):
            total_fruits += dp_child3[n - 1]

        return total_fruits
08/08
# 808. Soup Servings

class Solution:
    def f(self, a, b, dp):
        if a <= 0 and b > 0:
            return 1.0
        if a == 0 and b == 0:
            return 0.5
        if a > 0 and b <= 0:
            return 0.0
        if a <= 0 and b <= 0:
            return 0.5
        if dp[a][b] != -1:
            return dp[a][b]

        x = 0.25 * self.f(a - 100, b, dp)
        y = 0.25 * self.f(a - 75, b - 25, dp)
        z = 0.25 * self.f(a - 50, b - 50, dp)
        w = 0.25 * self.f(a - 25, b - 75, dp)

        dp[a][b] = x + y + z + w
        return dp[a][b]

    def soupServings(self, n):
        if n > 4800:
            return 1.0
        dp = [[-1 for _ in range(n + 1)] for _ in range(n + 1)]
        return self.f(n, n, dp)

09/08
#  231. Power of Two

class Solution(object):
    def isPowerOfTwo(self, n):
        e: bool
        """
        return n > 0 and (n & (n - 1)) == 0

# 646. Maximum Length of Pair Chain

class Solution(object):
    def findLongestChain(self, pairs):
        """
        :type pairs: List[List[int]]
        :rtype: int
        """
        pairs.sort(key=lambda x: x[1])
        
        curr_end = float('-inf')
        count = 0
        
        for left, right in pairs:
            if left > curr_end:  
                count += 1
                curr_end = right
        
        return count

10/08
# 869. Reordered Power of 2

class Solution(object):
    def reorderedPowerOf2(self, n):
        """
        :type n: int
        :rtype: bool
        """
        def digit_signature(x):
            return ''.join(sorted(str(x)))
        
        power_signatures = set(digit_signature(1 << i) for i in range(31))
        
        return digit_signature(n) in power_signatures

11/08
# 2438. Range Product Queries of Powers

class Solution(object):
    def productQueries(self, n, queries):
        """
        :type n: int
        :type queries: List[List[int]]
        :rtype: List[int]
        """
        MOD = 10**9 + 7

        powers = []
        bit = 0
        while n > 0:
            if n & 1:
                powers.append(1 << bit) 
            bit += 1
            n >>= 1
        prefix_prod = [1] * len(powers)
        prefix_prod[0] = powers[0] % MOD
        for i in range(1, len(powers)):
            prefix_prod[i] = (prefix_prod[i-1] * powers[i]) % MOD

        ans = []
        for l, r in queries:
            if l == 0:
                ans.append(prefix_prod[r] % MOD)
            else:
                ans.append((prefix_prod[r] * pow(prefix_prod[l-1], MOD-2, MOD)) % MOD)

        return ans

12/08
#  2787. Ways to Express an Integer as Sum of Powers

class Solution(object):
    def numberOfWays(self, n, x):
        """
        :type n: int
        :type x: int
        :rtype: int
        """
        MOD = 10**9 + 7
        
        powers = []
        base = 1
        while True:
            val = base ** x
            if val > n:
                break
            powers.append(val)
            base += 1
        
        memo = {}
        
        def dfs(remaining, index):
            if remaining == 0:
                return 1
            if remaining < 0 or index == len(powers):
                return 0
            
            if (remaining, index) in memo:
                return memo[(remaining, index)]
            include = dfs(remaining - powers[index], index + 1)
            exclude = dfs(remaining, index + 1)
            
            memo[(remaining, index)] = (include + exclude) % MOD
            return memo[(remaining, index)]
        
        return dfs(n, 0)
13/08
# 326. Power of Three

class Solution(object):
    def isPowerOfThree(self, n):
        if n <= 0:
            return False
        
        while n % 3 == 0:
            n //= 3
        
        return n == 1

14/08
# 2264. Largest 3-Same-Digit Number in String

class Solution(object):
    def largestGoodInteger(self, num):
        """
        :type num: str
        :rtype: str
        """
        max_good = ""
        
        for i in range(len(num) - 2):
            sub = num[i:i+3]
            if sub[0] == sub[1] == sub[2]:
                if sub > max_good:
                    max_good = sub
        
        return max_good

15/08
# 342. Power of Four

class Solution(object):
    def isPowerOfFour(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n <= 0:
            return False
        while n % 4 == 0:
            n //= 4
        return n == 1

16/08
# 1323. Maximum 69 Number

class Solution(object):
    def maximum69Number (self, num):
        """
        :type num: int
        :rtype: int
        """
        num_str = list(str(num))
        
        for i in range(len(num_str)):
            if num_str[i] == '6':
                num_str[i] = '9'
                break  
        
        return int("".join(num_str))

17/08
# 837. New 21 Game

class Solution(object):
    def new21Game(self, n, k, maxPts):
        """
        :type n: int
        :type k: int
        :type maxPts: int
        :rtype: float
        """
        if k == 0 or n >= k + maxPts:
            return 1.0
        
        dp = [0.0] * (n + 1)   
        dp[0] = 1.0           
        
        window_sum = 1.0      
        result = 0.0
        
        for i in range(1, n + 1):
            dp[i] = window_sum / maxPts
            if i < k:
                window_sum += dp[i]
            else:
                result += dp[i]
            
            if i - maxPts >= 0:
                window_sum -= dp[i - maxPts]
        
        return result

# 649. Dota2 Senate

from collections import deque

class Solution(object):
    def predictPartyVictory(self, senate):
        """
        :type senate: str
        :rtype: str
        """
        n = len(senate)
        radiant = deque()
        dire = deque()

        for i, s in enumerate(senate):
            if s == 'R':
                radiant.append(i)
            else:
                dire.append(i)

        while radiant and dire:
            r = radiant.popleft()
            d = dire.popleft()
            if r < d:
                radiant.append(r + n)
            else:
                dire.append(d + n)

        return "Radiant" if radiant else "Dire"

# 659. Split Array into Consecutive Subsequences

from collections import Counter, defaultdict

class Solution(object):
    def isPossible(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        freq = Counter(nums)       
        need = defaultdict(int)     

        for num in nums:
            if freq[num] == 0:
                continue  

            freq[num] -= 1

            if need[num] > 0:
                need[num] -= 1
                need[num + 1] += 1
            elif freq[num + 1] > 0 and freq[num + 2] > 0:
                freq[num + 1] -= 1
                freq[num + 2] -= 1
                need[num + 3] += 1

            else:
                return False

        return True

18/08
#  679. 24 Game

class Solution(object):
    def judgePoint24(self, cards):
        """
        :type cards: List[int]
        :rtype: bool
        """
        EPSILON = 1e-6  
        TARGET = 24.0

        def dfs(nums):
            if len(nums) == 1:
                return abs(nums[0] - TARGET) < EPSILON

            for i in range(len(nums)):
                for j in range(len(nums)):
                    if i == j:
                        continue
                    
                    next_nums = []
                    for k in range(len(nums)):
                        if k != i and k != j:
                            next_nums.append(nums[k])
                    
                    for op in operations(nums[i], nums[j]):
                        next_nums.append(op)
                        if dfs(next_nums):
                            return True
                        next_nums.pop()
            return False

        def operations(a, b):
            res = [a + b, a - b, b - a, a * b]
            if abs(b) > 1e-6:
                res.append(a / b)
            if abs(a) > 1e-6:
                res.append(b / a)
            return res

        return dfs([float(c) for c in cards])

19/08
#  2348. Number of Zero-Filled Subarrays

class Solution(object):
    def zeroFilledSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = 0   
        streak = 0  
        for num in nums:
            if num == 0:
                streak += 1
                count += streak   
            else:
                streak = 0 
        return count

20/08
# 1277. Count Square Submatrices with All Ones

class Solution(object):
    def countSquares(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if not matrix or not matrix[0]:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        total = 0
        
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 1:
                    if i == 0 or j == 0:
                        dp[i][j] = 1
                    else:
                        dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
                    total += dp[i][j]
        
        return total

21/08
# 1504. Count Submatrices With All Ones 

class Solution(object):
    def numSubmat(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: int
        """
        m, n = len(mat), len(mat[0])
        height = [[0] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if mat[i][j] == 1:
                    height[i][j] = (height[i-1][j] + 1) if i > 0 else 1
        
        total = 0
        
        for i in range(m):
            for j in range(n):
                if height[i][j] > 0:
                    min_h = height[i][j]
                    for k in range(j, -1, -1):
                        if height[i][k] == 0:
                            break
                        min_h = min(min_h, height[i][k])
                        total += min_h
        
        return total

22/08
# 3195. Find the Minimum Area to Cover All Ones I

class Solution(object):
    def minimumArea(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        
        min_row, max_row = m, -1
        min_col, max_col = n, -1
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    min_row = min(min_row, i)
                    max_row = max(max_row, i)
                    min_col = min(min_col, j)
                    max_col = max(max_col, j)
        
        height = max_row - min_row + 1
        width = max_col - min_col + 1
        
        return height * width

# 670. Maximum Swap

class Solution(object):
    def maximumSwap(self, num):
        """
        :type num: int
        :rtype: int
        """
        digits = list(str(num))
        
        last = {int(d): i for i, d in enumerate(digits)}
        
        for i, d in enumerate(digits):
            for bigger in range(9, int(d), -1):
                if last.get(bigger, -1) > i:
                    digits[i], digits[last[bigger]] = digits[last[bigger]], digits[i]
                    return int("".join(digits))
    
        return num

# 678. Valid Parenthesis String

class Solution(object):
    def checkValidString(self, s):
        """
        :type s: str
        :rtype: bool
        """
        low = high = 0 
        for ch in s:
            if ch == '(':
                low += 1
                high += 1
            elif ch == ')':
                low -= 1
                high -= 1
            else:  
                low -= 1 
                high += 1  

            if high < 0:  
                return False
            if low < 0:   
                low = 0

        return low == 0

#  680. Valid Palindrome II

class Solution(object):
    def validPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        def is_palindrome(left, right):
            while left < right:
                if s[left] != s[right]:
                    return False
                left += 1
                right -= 1
            return True
        
        left, right = 0, len(s) - 1
        
        while left < right:
            if s[left] != s[right]:
                return is_palindrome(left + 1, right) or is_palindrome(left, right - 1)
            left += 1
            right -= 1
        
        return True

#  714. Best Time to Buy and Sell Stock with Transaction Fee

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        n = len(prices)
        if n == 0:
            return 0
        
        hold = -prices[0]   
        cash = 0           
        
        for price in prices[1:]:
            hold = max(hold, cash - price)
            cash = max(cash, hold + price - fee)
        
        return cash

23/08
# 3197. Find the Minimum Area to Cover All Ones II

class Solution {
public:
    int minimumSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        unordered_map<string, int> memo;

        function<int(int, int, int, int, int)> getOne = [&](int i1, int j1, int i2, int j2, int k) {
            int minx = INT_MAX;
            int maxx = INT_MIN;
            int miny = INT_MAX;
            int maxy = INT_MIN;

            for (int i = i1; i <= i2; ++i) {
                for (int j = j1; j <= j2; ++j) {
                    if (grid[i][j] == 1) {
                        minx = min(minx, i);
                        maxx = max(maxx, i);
                        miny = min(miny, j);
                        maxy = max(maxy, j);
                    }
                }
            }

            if (minx == INT_MAX) {
                return 0;
            }

            return (maxx - minx + 1) * (maxy - miny + 1);
        };

        function<int(int, int, int, int, int)> getNext = [&](int i1, int j1, int i2, int j2, int k) {
            string key = to_string(i1) + "," + to_string(j1) + "," + to_string(i2) + "," + to_string(j2) + "," + to_string(k);
            if (memo.find(key) != memo.end()) {
                return memo[key];
            }

            int output = INT_MAX;

            if (k == 1) {
                output = getOne(i1, j1, i2, j2, k);
            } else if (k == 2) {
                for (int i = i1; i < i2; ++i) {
                    output = min(output, getNext(i1, j1, i, j2, 1) + getNext(i + 1, j1, i2, j2, 1));
                }
                for (int j = j1; j < j2; ++j) {
                    output = min(output, getNext(i1, j1, i2, j, 1) + getNext(i1, j + 1, i2, j2, 1));
                }
            } else if (k == 3) {
                for (int i = i1; i < i2; ++i) {
                    output = min(output, getNext(i1, j1, i, j2, 1) + getNext(i + 1, j1, i2, j2, 2));
                    output = min(output, getNext(i1, j1, i, j2, 2) + getNext(i + 1, j1, i2, j2, 1));
                }
                for (int j = j1; j < j2; ++j) {
                    output = min(output, getNext(i1, j1, i2, j, 1) + getNext(i1, j + 1, i2, j2, 2));
                    output = min(output, getNext(i1, j1, i2, j, 2) + getNext(i1, j + 1, i2, j2, 1));
                }
            }

            memo[key] = output;
            return output;
        };

        int ans = getNext(0, 0, m - 1, n - 1, 3);
        return ans;
    }
};

24/08

# 1493. Longest Subarray of 1's After Deleting One Element  

class Solution(object):
    def longestSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left = 0
        zero_count = 0
        max_len = 0

        for right in range(len(nums)):
            if nums[right] == 0:
                zero_count += 1
            
            # shrink window if more than one zero
            while zero_count > 1:
                if nums[left] == 0:
                    zero_count -= 1
                left += 1
            
            # length of window minus one deletion
            max_len = max(max_len, right - left)

        return max_len

25/08
# 498. Diagonal Traverse

class Solution(object):
    def findDiagonalOrder(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: List[int]
        """
        if not mat or not mat[0]:
            return []

        m, n = len(mat), len(mat[0])
        result = []
        row, col = 0, 0
        direction = 1 
        for _ in range(m * n):
            result.append(mat[row][col])
            
            if direction == 1:
                if col == n - 1: 
                    row += 1
                    direction = -1
                elif row == 0:  
                    col += 1
                    direction = -1
                else:  
                    row -= 1
                    col += 1
            
            else:
                if row == m - 1: 
                    col += 1
                    direction = 1
                elif col == 0: 
                    row += 1
                    direction = 1
                else:  
                    row += 1
                    col -= 1

        return result

26/08
#  3000. Maximum Area of Longest Diagonal Rectangle

import math

class Solution(object):
    def areaOfMaxDiagonal(self, dimensions):
        """
        :type dimensions: List[List[int]]
        :rtype: int
        """
        max_diag = 0
        max_area = 0
        
        for length, width in dimensions:
            diag = math.sqrt(length * length + width * width)
            area = length * width
            
            if diag > max_diag:
                max_diag = diag
                max_area = area
            elif abs(diag - max_diag) < 1e-9:  
                max_area = max(max_area, area)
        
        return max_area

#  738. Monotone Increasing Digits

class Solution(object):
    def monotoneIncreasingDigits(self, n):
        """
        :type n: int
        :rtype: int
        """
        digits = list(str(n))
        i = 1

        while i < len(digits) and digits[i - 1] <= digits[i]:
            i += 1

        if i == len(digits):
            return n

        while i > 0 and digits[i - 1] > digits[i]:
            digits[i - 1] = str(int(digits[i - 1]) - 1)
            i -= 1

        for j in range(i + 1, len(digits)):
            digits[j] = '9'

        return int("".join(digits))

27/08  
#  3459. Length of Longest V-Shaped Diagonal Segment

class Solution:
    DIRS = [(1, 1), (1, -1), (-1, -1), (-1, 1)]

    def lenOfVDiagonal(self, grid):
        """
        Finds the longest diagonal path alternating between 1 and 2.
        A path can make at most one clockwise turn.
        """
        m, n = len(grid), len(grid[0])

        memo = [[[0] * (1 << 3) for _ in range(n)] for _ in range(m)]
        ans = 0  

        for i in range(m):
            for j in range(n):
                if grid[i][j] != 1:
                    continue
                maxs = [m - i, j + 1, i + 1, n - j]

                for k in range(4):
                    if maxs[k] > ans:  
                        ans = max(ans, self.dfs(i, j, k, 1, 2, grid, memo) + 1)

        return ans

    def dfs(self, i, j, k, canTurn, target, grid, memo):
        """
        Depth-first search with memoization.
        Args:
            i, j    -> current cell position
            k       -> current direction index (0-3)
            canTurn -> whether a clockwise turn is still allowed (1 = yes, 0 = no)
            target  -> expected value (1 or 2, alternating each step)
            grid    -> input matrix
            memo    -> memoization table
        Returns:
            Maximum path length starting from (i, j) following given rules.
        """
        m, n = len(grid), len(grid[0])

        i += self.DIRS[k][0]
        j += self.DIRS[k][1]

        if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] != target:
            return 0

        mask = (k << 1) | canTurn

        if memo[i][j][mask] > 0:
            return memo[i][j][mask]

        res = self.dfs(i, j, k, canTurn, 2 - target, grid, memo)

        if canTurn == 1:
            maxs = [m - i - 1, j, i, n - j - 1]
            nk = (k + 1) % 4  
            if maxs[nk] > res: 
                res = max(res, self.dfs(i, j, nk, 0, 2 - target, grid, memo))
        memo[i][j][mask] = res + 1
        return memo[i][j][mask]

28/08
#  

class Solution:
    def sortMatrix(self, grid):
        n = len(grid)

        for start_row in range(n - 1, -1, -1):
            diagonal = []
            r, c = start_row, 0
            while r < n and c < n:
                diagonal.append(grid[r][c])
                r += 1
                c += 1
            diagonal.sort(reverse=True) 
            r, c, pos = start_row, 0, 0
            while r < n and c < n:
                grid[r][c] = diagonal[pos]
                r += 1
                c += 1
                pos += 1

        for start_col in range(1, n):
            diagonal = []
            r, c = 0, start_col
            while r < n and c < n:
                diagonal.append(grid[r][c])
                r += 1
                c += 1
            diagonal.sort()  
            r, c, pos = 0, start_col, 0
            while r < n and c < n:
                grid[r][c] = diagonal[pos]
                r += 1
                c += 1
                pos += 1

        return grid

29/08
#  3021. Alice and Bob Playing Flower Game 

class Solution(object):
    def flowerGame(self, n, m):
        """
        :type n: int
        :type m: int
        :rtype: int
        """
        odd_n = (n + 1) // 2
        even_n = n // 2
        odd_m = (m + 1) // 2
        even_m = m // 2

        return odd_n * even_m + even_n * odd_m

30/08
#  36. Valid Sudoku

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]

        for r in range(9):
            for c in range(9):
                val = board[r][c]

                if val == ".":
                    continue

                box_index = (r // 3) * 3 + (c // 3)

                if (val in rows[r]) or (val in cols[c]) or (val in boxes[box_index]):
                    return False

                rows[r].add(val)
                cols[c].add(val)
                boxes[box_index].add(val)

        return True

#  765. Couples Holding Hands

class Solution(object):
    def minSwapsCouples(self, row):
        """
        :type row: List[int]
        :rtype: int
        """
        n = len(row)
        pos = {person: i for i, person in enumerate(row)}
        
        swaps = 0
        for i in range(0, n, 2): 
            first = row[i]
            partner = first ^ 1  
            
            if row[i + 1] != partner:
                swaps += 1
                partner_index = pos[partner]
                
                row[i + 1], row[partner_index] = row[partner_index], row[i + 1]
                
                pos[row[partner_index]] = partner_index
                pos[row[i + 1]] = i + 1

        return swaps

#  767. Reorganize String

import heapq
from collections import Counter

class Solution(object):
    def reorganizeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        freq = Counter(s)
        
        max_count = max(freq.values())
        if max_count > (len(s) + 1) // 2:
            return ""
        
        heap = [(-count, char) for char, count in freq.items()]
        heapq.heapify(heap)
        
        prev_count, prev_char = 0, ""
        result = []
        
        while heap:
            count, char = heapq.heappop(heap)
            result.append(char)
            
            if prev_count < 0:
                heapq.heappush(heap, (prev_count, prev_char))
            
            prev_count, prev_char = count + 1, char  
        
        return "".join(result)

#   768. Max Chunks To Make Sorted II

class Solution(object):
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        n = len(arr)
        prefix_max = [0] * n
        suffix_min = [0] * n

        prefix_max[0] = arr[0]
        for i in range(1, n):
            prefix_max[i] = max(prefix_max[i-1], arr[i])

        suffix_min[n-1] = arr[n-1]
        for i in range(n-2, -1, -1):
            suffix_min[i] = min(suffix_min[i+1], arr[i])

       
        chunks = 1  
        for i in range(n-1):
            if prefix_max[i] <= suffix_min[i+1]:
                chunks += 1

        return chunks

#  769. Max Chunks To Make Sorted

class Solution(object):
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        max_so_far = 0
        chunks = 0
        
        for i, num in enumerate(arr):
            max_so_far = max(max_so_far, num)
            if max_so_far == i:
                chunks += 1  
                
        return chunks

31/08
#  37. Sudoku Solver

class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }

private:
    bool solve(vector<vector<char>>& board) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (board[row][col] == '.') {
                    for (char num = '1'; num <= '9'; num++) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num;
                            if (solve(board)) return true;
                            board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    bool isValid(vector<vector<char>>& board, int row, int col, char num) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) return false;
        }
        int startRow = (row / 3) * 3, startCol = (col / 3) * 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num) return false;
            }
        }
        return true;
    }
};

01/09
#  1792. Maximum Average Pass Ratio

import heapq

class Solution(object):
    def maxAverageRatio(self, classes, extraStudents):
        """
        :type classes: List[List[int]]
        :type extraStudents: int
        :rtype: float
        """

        def gain(p, t):
            return (p + 1.0) / (t + 1.0) - (p * 1.0) / t

        heap = [(-gain(p, t), p, t) for p, t in classes]
        heapq.heapify(heap)

        for _ in range(extraStudents):
            g, p, t = heapq.heappop(heap)
            p, t = p + 1, t + 1
            heapq.heappush(heap, (-gain(p, t), p, t))

        total_ratio = 0.0
        while heap:
            _, p, t = heapq.heappop(heap)
            total_ratio += p * 1.0 / t

        return total_ratio / len(classes)

02/09
#  3025. Find the Number of Ways to Place People I

class Solution:
    def numberOfPairs(self, points: List[List[int]]) -> int:
        points = sorted(points, key= lambda x: [x[0],-x[1]])
        n = len(points)
        cnt = 0
        for i in range(n):
            j = i - 1
            min_y = float('inf')
            while j >= 0:
                if points[j][1] < min_y and points[j][1] >= points[i][1] and points[j][0] <= points[i][0]:
                    min_y = min(min_y, points[j][1])
                    cnt += 1
                j -= 1
        return cnt

03/09
#  3027. Find the Number of Ways to Place People II

class Solution {
public:
    int numberOfPairs(vector<vector<int>>& nums) {
        sort(nums.begin(), nums.end(), [](auto &a, auto &b){
            if (a[0] == b[0]) return a[1] > b[1];
            return a[0] < b[0];
        });

        int n = nums.size();
        int count = 0;

        for (int i = 0; i < n; i++) {
            int maxi = INT_MIN;
            for (int j = i + 1; j < n; j++) {
                if(nums[j][1]>nums[i][1]) continue;
                if(nums[j][1]>maxi){
                    count++;
                    maxi=nums[j][1];
                }
            }
        }
        return count;
    }
};

04/09
#   3516. Find Closest Person
class Solution(object):
    def findClosest(self, x, y, z):
        """
        :type x: int
        :type y: int
        :type z: int
        :rtype: int
        """
        dist1 = abs(x - z)  
        dist2 = abs(y - z)  

        if dist1 < dist2:
            return 1
        elif dist2 < dist1:
            return 2
        else:
            return 0

05/09
#  2749. Minimum Operations to Make the Integer Zero

class Solution(object):
    def makeTheIntegerZero(self, num1, num2):
        """
        :type num1: int
        :type num2: int
        :rtype: int
        """
        for k in range(1, 61):  
            val = num1 - k * num2
            if val < k:  
                continue
            if bin(val).count("1") <= k:  
                return k
        return -1

06/09
#  3495. Minimum Operations to Make Array Elements Zero
class Solution {
public:
    long long expSum4[18]={1};
    long long expSum(unsigned x){
        if (x==0) return 0;
        int log4=(31-countl_zero(x))/2;
        int r=x-(1<<(2*log4));
        return expSum4[log4]+r*(log4+1LL);
    }
    long long minOperations(vector<vector<int>>& queries) {
        for(int i=1; i<18; i++){
            expSum4[i]=expSum4[i-1]+3LL*i*(1LL<<(2*(i-1)))+1;
        }
        long long op=0;
        for(auto& q: queries){
            int l=q[0]-1, r=q[1];
            op+=(expSum(r)-expSum(l)+1)/2;
        }
        return op;
    }
};


07/09
#   1304. Find N Unique Integers Sum up to Zero

class Solution(object):
    def sumZero(self, n):
        res = []
        for i in range(1, n // 2 + 1):
            res.append(i)
            res.append(-i)
        if n % 2 == 1:
            res.append(0)
        return res

# 807. Max Increase to Keep City Skyline

class Solution(object):
    def maxIncreaseKeepingSkyline(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        
        row_max = [max(row) for row in grid]
        
        col_max = [max(grid[i][j] for i in range(n)) for j in range(n)]
        
        total_increase = 0
        for i in range(n):
            for j in range(n):
                total_increase += min(row_max[i], col_max[j]) - grid[i][j]
        
        return total_increase

#  826. Most Profit Assigning Work

import bisect

class Solution(object):
    def maxProfitAssignment(self, difficulty, profit, worker):
        """
        :type difficulty: List[int]
        :type profit: List[int]
        :type worker: List[int]
        :rtype: int
        """
        jobs = sorted(zip(difficulty, profit))
        
        max_profit = []
        max_so_far = 0
        diffs = []
        for d, p in jobs:
            max_so_far = max(max_so_far, p)
            diffs.append(d)
            max_profit.append(max_so_far)
        
        total = 0
        for w in worker:
            idx = bisect.bisect_right(diffs, w) - 1
            if idx >= 0:
                total += max_profit[idx]
        return total


08/09
#  1317. Convert Integer to the Sum of Two No-Zero Integers

class Solution(object):
    def getNoZeroIntegers(self, n):
        """
        :type n: int
        :rtype: List[int]
        """
        def hasZero(num):
            return '0' in str(num)
        
        for a in range(1, n):
            b = n - a
            if not hasZero(a) and not hasZero(b):
                return [a, b]

09/09
#  2327. Number of People Aware of a Secret

class Solution(object):
    def peopleAwareOfSecret(self, n, delay, forget):
        """
        :type n: int
        :type delay: int
        :type forget: int
        :rtype: int
        """
        MOD = 10**9 + 7
        
        dp = [0] * (n + 1)
        dp[1] = 1  
        
        for day in range(1, n + 1):
            for share_day in range(day + delay, min(day + forget, n + 1)):
                dp[share_day] = (dp[share_day] + dp[day]) % MOD
        
        result = 0
        for day in range(n - forget + 1, n + 1):
            result = (result + dp[day]) % MOD
        
        return result

10/09
#  1733. Minimum Number of People to Teach 

class Solution(object):
    def minimumTeachings(self, n, languages, friendships):
        """
        :type n: int
        :type languages: List[List[int]]
        :type friendships: List[List[int]]
        :rtype: int
        """
        langs = [set(l) for l in languages]
        
        need_teaching = set()
        for u, v in friendships:
            u -= 1  
            v -= 1
            if langs[u].isdisjoint(langs[v]):
                need_teaching.add(u)
                need_teaching.add(v)
        
        min_teach = len(need_teaching)
        
        for lang in range(1, n + 1):
            already_know = sum(1 for user in need_teaching if lang in langs[user])
            min_teach = min(min_teach, len(need_teaching) - already_know)
        
        return min_teach

11/09
#   2785. Sort Vowels in a String

class Solution(object):
    def sortVowels(self, s):
        """
        :type s: str
        :rtype: str
        """
        vowels = set("aeiouAEIOU")
        extracted = [ch for ch in s if ch in vowels]
        
        extracted.sort()
        
        res = []
        idx = 0  
        for ch in s:
            if ch in vowels:
                res.append(extracted[idx])
                idx += 1
            else:
                res.append(ch)
        
        return "".join(res)

12/09
#  3227. Vowels Game in a String

class Solution(object):
    def doesAliceWin(self, s):
        
        vowels = set("aeiou")
        for ch in s:
            if ch in vowels:
                return True  
        return False  


13/09
#   

class Solution(object):
    def maxFreqSum(self, s):
       
        vowels = set("aeiou")
        freq = {}
        for ch in s:
            freq[ch] = freq.get(ch, 0) + 1
        max_vowel = 0
        max_consonant = 0
        for ch, count in freq.items():
            if ch in vowels:
                max_vowel = max(max_vowel, count)
            else:
                max_consonant = max(max_consonant, count)
        
        return max_vowel + max_consonant

14/09
#   966. Vowel Spellchecker

class Solution(object):
    def spellchecker(self, wordlist, queries):
        """
        :type wordlist: List[str]
        :type queries: List[str]
        :rtype: List[str]
        """
        vowels = set("aeiou")
        exact_words = set(wordlist)

        case_insensitive = {}
        for word in wordlist:
            lower = word.lower()
            if lower not in case_insensitive:
                case_insensitive[lower] = word
        def devowel(word):
            return ''.join('*' if ch in vowels else ch for ch in word.lower())

        vowel_insensitive = {}
        for word in wordlist:
            dv = devowel(word)
            if dv not in vowel_insensitive:
                vowel_insensitive[dv] = word

        result = []
        for q in queries:
            if q in exact_words:
                result.append(q)
            elif q.lower() in case_insensitive:
                result.append(case_insensitive[q.lower()])
            elif devowel(q) in vowel_insensitive:
                result.append(vowel_insensitive[devowel(q)])
            else:
                result.append("")
        return result

15/09
#   1935. Maximum Number of Words You Can Type

class Solution(object):
    def canBeTypedWords(self, text, brokenLetters):
        broken = set(brokenLetters)
        words = text.split()
        
        count = 0
        for word in words:
            if all(ch not in broken for ch in word):
                count += 1
        
        return count


16/09
#   2197. Replace Non-Coprime Numbers in Array

class Solution {
public:
    vector<int> replaceNonCoprimes(vector<int>& nums) {
        vector<int> stack;
        for (int num : nums) {
            while (!stack.empty()) {
                int top = stack.back();
                int g = gcd(top, num);
                if (g == 1) {
                    break;
                }
                stack.pop_back();
                long long merged = (long long)top / g * num;
                num = (int)merged;
            }
            stack.push_back(num);
        }
        return stack;
    }
    
private:
    int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
};

17/09
#   2353. Design a Food Rating System

import heapq
class FoodRatings(object):

    def __init__(self, foods, cuisines, ratings):
        """
        :type foods: List[str]
        :type cuisines: List[str]
        :type ratings: List[int]
        """
        self.food_to_cuisine = {}
        self.food_to_rating = {}
        self.cuisine_to_heap = {}

        for f, c, r in zip(foods, cuisines, ratings):
            self.food_to_cuisine[f] = c
            self.food_to_rating[f] = r
            if c not in self.cuisine_to_heap:
                self.cuisine_to_heap[c] = []
            heapq.heappush(self.cuisine_to_heap[c], (-r, f))

    def changeRating(self, food, newRating):
        """
        :type food: str
        :type newRating: int
        :rtype: None
        """
        cuisine = self.food_to_cuisine[food]
        self.food_to_rating[food] = newRating
        heapq.heappush(self.cuisine_to_heap[cuisine], (-newRating, food))

    def highestRated(self, cuisine):
        """
        :type cuisine: str
        :rtype: str
        """
        heap = self.cuisine_to_heap[cuisine]
        while heap:
            rating, food = heap[0]
            if -rating == self.food_to_rating[food]:
                return food
            heapq.heappop(heap)

18/09
#   3408. Design Task Manager

import bisect

class TaskManager:
    def __init__(self, tasks):
        self.mp = {}  # taskId -> (userId, priority)
        self.st = []  # sorted list of (priority, taskId)

        for userId, taskId, priority in tasks:
            self.mp[taskId] = (userId, priority)
            bisect.insort(self.st, (priority, taskId))

    def add(self, userId, taskId, priority):
        self.mp[taskId] = (userId, priority)
        bisect.insort(self.st, (priority, taskId))

    def edit(self, taskId, newPriority):
        userId, oldPriority = self.mp[taskId]
        idx = bisect.bisect_left(self.st, (oldPriority, taskId))
        self.st.pop(idx)
        self.mp[taskId] = (userId, newPriority)
        bisect.insort(self.st, (newPriority, taskId))

    def rmv(self, taskId):
        userId, priority = self.mp[taskId]
        idx = bisect.bisect_left(self.st, (priority, taskId))
        self.st.pop(idx)
        del self.mp[taskId]

    def execTop(self):
        if not self.mp:
            return -1
        priority, taskId = self.st.pop()  # highest priority
        userId, _ = self.mp[taskId]
        del self.mp[taskId]
        return userId

19/09
#   3484. Design Spreadsheet

class Spreadsheet(object):

    def __init__(self, rows):
        """
        :type rows: int
        """
        self.rows = rows
        self.cols = 26  
        self.cells = {}  

    def setCell(self, cell, value):
        """
        :type cell: str
        :type value: int
        :rtype: None
        """
        self.cells[cell] = value

    def resetCell(self, cell):
        """
        :type cell: str
        :rtype: None
        """
        if cell in self.cells:
            del self.cells[cell]

    def getValue(self, formula):
        """
        :type formula: str
        :rtype: int
        """
        assert formula.startswith("=")
        parts = formula[1:].split("+")
        result = 0
        for token in parts:
            if token.isdigit():  
                result += int(token)
            else:  
                result += self.cells.get(token, 0)
        return result

20/09
#   3508. Implement Router

from collections import deque
from bisect import bisect_left, bisect_right

class Router(object):

    def __init__(self, memoryLimit):
        """
        :type memoryLimit: int
        """
        self.memoryLimit = memoryLimit
        self.queue = deque()  # FIFO queue for packets
        self.packet_set = set()  # detect duplicates
        self.dest_map = {}  

    def addPacket(self, source, destination, timestamp):
        """
        :type source: int
        :type destination: int
        :type timestamp: int
        :rtype: bool
        """
        packet = (source, destination, timestamp)

        # Duplicate check
        if packet in self.packet_set:
            return False

        if len(self.queue) >= self.memoryLimit:
            old_src, old_dst, old_time = self.queue.popleft()
            self.packet_set.remove((old_src, old_dst, old_time))
            # remove old_time from sorted list
            idx = bisect_left(self.dest_map[old_dst], old_time)
            if 0 <= idx < len(self.dest_map[old_dst]) and self.dest_map[old_dst][idx] == old_time:
                self.dest_map[old_dst].pop(idx)
            if not self.dest_map[old_dst]:
                del self.dest_map[old_dst]

        # Add new packet
        self.queue.append(packet)
        self.packet_set.add(packet)
        if destination not in self.dest_map:
            self.dest_map[destination] = []
        self.dest_map[destination].append(timestamp)  # timestamps always increasing

        return True

    def forwardPacket(self):
        """
        :rtype: List[int]
        """
        if not self.queue:
            return []

        src, dst, ts = self.queue.popleft()
        self.packet_set.remove((src, dst, ts))

        # remove from sorted list
        idx = bisect_left(self.dest_map[dst], ts)
        if 0 <= idx < len(self.dest_map[dst]) and self.dest_map[dst][idx] == ts:
            self.dest_map[dst].pop(idx)
        if not self.dest_map[dst]:
            del self.dest_map[dst]

        return [src, dst, ts]

    def getCount(self, destination, startTime, endTime):
        """
        :type destination: int
        :type startTime: int
        :type endTime: int
        :rtype: int
        """
        if destination not in self.dest_map:
            return 0

        timestamps = self.dest_map[destination]
        # count timestamps in [startTime, endTime]
        left = bisect_left(timestamps, startTime)
        right = bisect_right(timestamps, endTime)
        return right - left

21/09
#    1912. Design Movie Rental System

struct Node {
    int shop, movie, price;
    bool operator<(const Node& other) const {
        if (price != other.price) return price < other.price;
        if (shop != other.shop) return shop < other.shop;
        return movie < other.movie;
    }
};

class MovieRentingSystem {
    unordered_map<long long, Node> byPair;
    unordered_map<int, set<Node>> availableByMovie;
    set<Node> rentedSet;

    long long key(int shop, int movie) {
        return ((long long)shop << 32) ^ movie;
    }

public:
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for (auto& e : entries) {
            int shop = e[0], movie = e[1], price = e[2];
            Node node{shop, movie, price};
            byPair[key(shop, movie)] = node;
            availableByMovie[movie].insert(node);
        }
    }

    vector<int> search(int movie) {
        vector<int> res;
        if (availableByMovie.count(movie) == 0) return res;
        auto& s = availableByMovie[movie];
        int count = 0;
        for (auto it = s.begin(); it != s.end() && count < 5; ++it, ++count) {
            res.push_back(it->shop);
        }
        return res;
    }

    void rent(int shop, int movie) {
        long long k = key(shop, movie);
        Node node = byPair[k];
        availableByMovie[movie].erase(node);
        rentedSet.insert(node);
    }

    void drop(int shop, int movie) {
        long long k = key(shop, movie);
        Node node = byPair[k];
        rentedSet.erase(node);
        availableByMovie[movie].insert(node);
    }

    vector<vector<int>> report() {
        vector<vector<int>> res;
        int count = 0;
        for (auto it = rentedSet.begin(); it != rentedSet.end() && count < 5; ++it, ++count) {
            res.push_back({it->shop, it->movie});
        }
        return res;
    }
};

22/09
#   3005. Count Elements With Maximum Frequency

from collections import Counter

class Solution(object):
    def maxFrequencyElements(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        freq = Counter(nums)   
        max_freq = max(freq.values())  
        total = sum(v for v in freq.values() if v == max_freq)  
        return total


23/09
#   165. Compare Version Numbers

class Solution(object):
    def compareVersion(self, version1, version2):
        """
        :type version1: str
        :type version2: str
        :rtype: int
        """
        v1 = [int(x) for x in version1.split('.')]
        v2 = [int(x) for x in version2.split('.')]
        
        max_len = max(len(v1), len(v2))
        v1.extend([0] * (max_len - len(v1)))
        v2.extend([0] * (max_len - len(v2)))
        
        for i in range(max_len):
            if v1[i] < v2[i]:
                return -1
            elif v1[i] > v2[i]:
                return 1
        return 0

24/09
#   166. Fraction to Recurring Decimal

class Solution(object):
    def fractionToDecimal(self, numerator, denominator):
        """
        :type numerator: int
        :type denominator: int
        :rtype: str
        """
        if numerator == 0:
            return "0"

        result = ""
        if (numerator < 0) ^ (denominator < 0):
            result += "-"

        numerator = abs(numerator)
        denominator = abs(denominator)

        result += str(numerator // denominator)
        remainder = numerator % denominator

        if remainder == 0:
            return result

        result += "."
        remainders = {}
        while remainder != 0:
            if remainder in remainders:
                result = result[:remainders[remainder]] + "(" + result[remainders[remainder]:] + ")"
                return result

            remainders[remainder] = len(result)
            remainder *= 10
            result += str(remainder // denominator)
            remainder %= denominator

        return result


25/09
#   120. Triangle

class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        for row in range(len(triangle) - 2, -1, -1):
            for col in range(len(triangle[row])):
                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])
        
        return triangle[0][0]

26/09
#    611. Valid Triangle Number

class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        count = 0
        n = len(nums)

        for k in range(n - 1, 1, -1):
            i = 0
            j = k - 1
            while i < j:
                if nums[i] + nums[j] > nums[k]:
                    count += (j - i)
                    j -= 1
                else:
                    i += 1
        return count

27/09
#    812. Largest Triangle Area

class Solution(object):
    def largestTriangleArea(self, points):
        """
        :type points: List[List[int]]
        :rtype: float
        """
        def area(p1, p2, p3):
            x1, y1 = p1
            x2, y2 = p2
            x3, y3 = p3
            return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2.0

        n = len(points)
        max_area = 0.0

        for i in range(n):
            for j in range(i+1, n):
                for k in range(j+1, n):
                    max_area = max(max_area, area(points[i], points[j], points[k]))

        return max_area

28/09
#   976. Largest Perimeter Triangle

class Solution(object):
    def largestPerimeter(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort(reverse=True)  

        for i in range(len(nums) - 2):
            if nums[i] < nums[i+1] + nums[i+2]:
                return nums[i] + nums[i+1] + nums[i+2]

        return 0

29/09
#  1039. Minimum Score Triangulation of Polygon

class Solution(object):
    def minScoreTriangulation(self, values):
        """
        :type values: List[int]
        :rtype: int
        """
        n = len(values)
        dp = [[0] * n for _ in range(n)]

        for length in range(3, n + 1): 
            for i in range(n - length + 1):
                j = i + length - 1
                dp[i][j] = float('inf')
                for k in range(i + 1, j):
                    dp[i][j] = min(dp[i][j],
                                   dp[i][k] + dp[k][j] + values[i] * values[j] * values[k])

        return dp[0][n - 1]

30/09
#   2221. Find Triangular Sum of an Array

class Solution:
    def triangularSum(self, nums):
        l1 = []

        while len(nums) != 1:
            for i in range(len(nums)-1):
                number = (nums[i] + nums[i+1]) % 10
                l1.append(number)
            nums = l1[:]
            l1 = []
        return nums[0]

01/10
#   1518. Water Bottles

class Solution(object):
    def numWaterBottles(self, numBottles, numExchange):
        """
        :type numBottles: int
        :type numExchange: int
        :rtype: int
        """
        total_drunk = numBottles
        empty = numBottles

        while empty >= numExchange:
            new_bottles = empty // numExchange
            total_drunk += new_bottles
            empty = empty % numExchange + new_bottles

        return total_drunk

02/10
#   3100. Water Bottles II

class Solution(object):
    def maxBottlesDrunk(self, numBottles, numExchange):
        total_drunk = numBottles
        empty = numBottles

        while empty >= numExchange:
            empty -= numExchange
            total_drunk += 1
            empty += 1 
            numExchange += 1

        return total_drunk

#   846. Hand of Straights

import collections
import heapq

class Solution(object):
    def isNStraightHand(self, hand, groupSize):
        
        n = len(hand)
        if n % groupSize != 0:
            return False  # must divide evenly

        count = collections.Counter(hand)
        min_heap = list(count.keys())
        heapq.heapify(min_heap)

        while min_heap:
            first = min_heap[0]  # smallest card
            for i in range(groupSize):
                if count[first + i] == 0:
                    return False
                count[first + i] -= 1
                if count[first + i] == 0:
                    if first + i != min_heap[0]:
                        return False
                    heapq.heappop(min_heap)

        return True

03/10
#  407. Trapping Rain Water II

import heapq

class Solution(object):
    def trapRainWater(self, heightMap):
        
        if not heightMap or not heightMap[0]:
            return 0

        m, n = len(heightMap), len(heightMap[0])
        visited = [[False] * n for _ in range(m)]
        heap = []

        for i in range(m):
            for j in [0, n - 1]:
                heapq.heappush(heap, (heightMap[i][j], i, j))
                visited[i][j] = True
        for j in range(n):
            for i in [0, m - 1]:
                if not visited[i][j]:
                    heapq.heappush(heap, (heightMap[i][j], i, j))
                    visited[i][j] = True

        trapped = 0
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        while heap:
            h, x, y = heapq.heappop(heap)
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
                    visited[nx][ny] = True
                    trapped += max(0, h - heightMap[nx][ny])
                    heapq.heappush(heap, (max(h, heightMap[nx][ny]), nx, ny))

        return trapped

05/10
#   417. Pacific Atlantic Water Flow

class Solution(object):
    def pacificAtlantic(self, heights):
        if not heights or not heights[0]:
            return []

        m, n = len(heights), len(heights[0])
        pacific = [[False] * n for _ in range(m)]
        atlantic = [[False] * n for _ in range(m)]

        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def dfs(r, c, visited):
            visited[r][c] = True
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if (0 <= nr < m and 0 <= nc < n and 
                    not visited[nr][nc] and 
                    heights[nr][nc] >= heights[r][c]):
                    dfs(nr, nc, visited)

        for i in range(m):
            dfs(i, 0, pacific)
            dfs(i, n - 1, atlantic)
        for j in range(n):
            dfs(0, j, pacific)
            dfs(m - 1, j, atlantic)

        res = []
        for i in range(m):
            for j in range(n):
                if pacific[i][j] and atlantic[i][j]:
                    res.append([i, j])
        return res

06/10
#  778. Swim in Rising Water

import heapq

class Solution(object):
    def swimInWater(self, grid):
      
        n = len(grid)
        visited = [[False] * n for _ in range(n)]
        heap = [(grid[0][0], 0, 0)]  
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        while heap:
            t, r, c = heapq.heappop(heap)
            if r == n - 1 and c == n - 1:
                return t  
            if visited[r][c]:
                continue
            visited[r][c] = True

            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc]:\
                    heapq.heappush(heap, (max(t, grid[nr][nc]), nr, nc))

07/10
#  1488. Avoid Flood in The City

import bisect

class Solution(object):
    def avoidFlood(self, rains):
        """
        :type rains: List[int]
        :rtype: List[int]
        """
        n = len(rains)
        ans = [-1] * n
        full_lakes = {}          # lake -> last day it was filled
        dry_days = []            # indices of days when we can dry

        for i, lake in enumerate(rains):
            if lake == 0:
                # this is a dry day, we can dry any lake later
                dry_days.append(i)
                ans[i] = 1  # default value, will update later
            else:
                # it rains on lake
                if lake in full_lakes:
                    # find the next dry day available after the last rain of this lake
                    j = bisect.bisect_right(dry_days, full_lakes[lake])
                    if j == len(dry_days):
                        return []  # no dry day available -> flood occurs
                    dry_day = dry_days[j]
                    ans[dry_day] = lake  # dry this lake on that day
                    dry_days.pop(j)      # remove used dry day
                # update this lake as full today
                full_lakes[lake] = i

        return ans

08/09
#   2300. Successful Pairs of Spells and Potions

import bisect

class Solution(object):
    def successfulPairs(self, spells, potions, success):
        """
        :type spells: List[int]
        :type potions: List[int]
        :type success: int
        :rtype: List[int]
        """
        potions.sort()
        m = len(potions)
        res = []

        for spell in spells:
            required = float(success) / spell
            index = bisect.bisect_left(potions, required)
            res.append(m - index)

        return res
