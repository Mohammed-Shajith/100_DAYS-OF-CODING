30/06/25
# 316 Remove Duplicate Letters:
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        last_index = {}
        for i in range(len(s)):
            last_index[s[i]] = i

        result = []
        seen = set()

        for i in range(len(s)):
            c = s[i]
            if c not in seen:
                while result and c < result[-1] and i < last_index[result[-1]]:
                    seen.remove(result.pop())
                result.append(c)
                seen.add(c)

        return ''.join(result)
01/07/25
# 321. Create Maximum Number
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
        def maxSubsequence(nums, t):
            stack = []
            drop = len(nums) - t
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:t]

        def merge(seq1, seq2):
            res = []
            while seq1 or seq2:
                if seq1 > seq2:
                    res.append(seq1.pop(0))
                else:
                    res.append(seq2.pop(0))
            return res

        best = []
        for i in range(max(0, k - len(nums2)), min(k, len(nums1)) + 1):
            seq1 = maxSubsequence(nums1, i)
            seq2 = maxSubsequence(nums2, k - i)
            merged = merge(seq1[:], seq2[:]) 
            if merged > best:
                best = merged
        return best
02/07/25
#3333. Find the Original Typed String II
class Solution:
    MOD = 10**9 + 7

    def possibleStringCount(self, word: str, k: int) -> int:
        if not word:
            return 0

        groups = []
        count = 1
        for i in range(1, len(word)):
            if word[i] == word[i - 1]:
                count += 1
            else:
                groups.append(count)
                count = 1
        groups.append(count)

        total = 1
        for num in groups:
            total = (total * num) % self.MOD

        if k <= len(groups):
            return total

        dp = [0] * k
        dp[0] = 1

        for num in groups:
            new_dp = [0] * k
            sum_val = 0
            for s in range(k):
                if s > 0:
                    sum_val = (sum_val + dp[s - 1]) % self.MOD
                if s > num:
                    sum_val = (sum_val - dp[s - num - 1] + self.MOD) % self.MOD
                new_dp[s] = sum_val
            dp = new_dp

        invalid = sum(dp[len(groups):k]) % self.MOD
        return (total - invalid + self.MOD) % self.MOD
#324. Wiggle Sort II
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: None. Modifies nums in-place.
        """
        n = len(nums)
        nums.sort()

        half = (n + 1) // 2
        small = nums[:half][::-1]  
        large = nums[half:][::-1] 

        for i in range(n):
            if i % 2 == 0:
                nums[i] = small[i // 2]
            else:
                nums[i] = large[i // 2]
03/07
# 3304. Find the K-th Character in String Game I
class Solution(object):
    def kthCharacter(self, k):
        """
        :type k: int
        :rtype: str
        """
        word = "a"
        
        while len(word) < k:
            next_part = ""
            for c in word:
                next_char = chr((ord(c) - ord('a') + 1) % 26 + ord('a'))
                next_part += next_char
            word += next_part
        
        return word[k - 1]

04/07
# 334. Increasing Triplet Subsequence
class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        first = float('inf')
        second = float('inf')

        for num in nums:
            if num <= first:
                first = num  
            elif num <= second:
                second = num  
            else:
                return True

        return False
# 376. Wiggle Subsequence
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0

        n = len(nums)
        up = 1
        down = 1

        for i in range(1, n):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1

        return max(up, down)
05/07
# 1394. Find Lucky Integer in an Array
class Solution(object):
    def findLucky(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        from collections import Counter

        freq = Counter(arr)
        result = -1

        for num in freq:
            if freq[num] == num:
                result = max(result, num)

        return result
06/07
# 1865. Finding Pairs With a Certain Sum
from collections import Counter

class FindSumPairs(object):

    def __init__(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        """
        self.nums1 = nums1
        self.nums2 = nums2
        self.freq2 = Counter(nums2)

    def add(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        old_val = self.nums2[index]
        self.freq2[old_val] -= 1
        if self.freq2[old_val] == 0:
            del self.freq2[old_val]
        
        self.nums2[index] += val
        new_val = self.nums2[index]
        self.freq2[new_val] += 1

    def count(self, tot):
        """
        :type tot: int
        :rtype: int
        """
        count = 0
        for num in self.nums1:
            complement = tot - num
            count += self.freq2.get(complement, 0)
        return count

07/05
# 397. Integer Replacement
class Solution(object):
    def integerReplacement(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo = {}

        def helper(x):
            if x == 1:
                return 0
            if x in memo:
                return memo[x]
            if x % 2 == 0:
                memo[x] = 1 + helper(x // 2)
            else:
                memo[x] = 1 + min(helper(x + 1), helper(x - 1))
            return memo[x]

        return helper(n)

# 402. Remove K Digits
class Solution(object):
    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        stack = []

        for digit in num:
            while stack and k > 0 and stack[-1] > digit:
                stack.pop()
                k -= 1
            stack.append(digit)
        while k > 0:
            stack.pop()
            k -= 1
        result = ''.join(stack).lstrip('0')

        return result if result else "0"

# 409. Longest Palindrome  
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        from collections import Counter

        count = Counter(s)
        length = 0
        odd_found = False

        for freq in count.values():
            if freq % 2 == 0:
                length += freq
            else:
                length += freq - 1
                odd_found = True

        if odd_found:
            length += 1  

        return length

08/07
# 1751. Maximum Number of Events That Can Be Attended II
class Solution(object):
    def maxValue(self, events, k):
        """
        :type events: List[List[int]]
        :type k: int
        :rtype: int
        """
        events.sort()
        n = len(events)

        # Sort events by start time
        starts = [event[0] for event in events]

        next_event = [0] * n
        for i in range(n):
            lo, hi = i + 1, n
            while lo < hi:
                mid = (lo + hi) // 2
                if events[mid][0] > events[i][1]:
                    hi = mid
                else:
                    lo = mid + 1
            next_event[i] = lo

        dp = [[0] * (k + 1) for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            for j in range(1, k + 1):
                # Skip current event
                skip = dp[i + 1][j]
                # Take current event
                take = events[i][2] + dp[next_event[i]][j - 1]
                dp[i][j] = max(skip, take)

        return dp[0][k]

09/07
# 3439. Reschedule Meetings for Maximum Free Time I

class Solution(object):
    def maxFreeTime(self, eventTime, k, startTime, endTime):
        """
        :type eventTime: int
        :type k: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        gap = [0] * (n + 1)

        
        gap[0] = startTime[0]

        
        for i in range(1, n):
            gap[i] = startTime[i] - endTime[i - 1]


        gap[n] = eventTime - endTime[n - 1]

        
        cur_gap = sum(gap[i] for i in range(min(k + 1, n + 1)))
        max_gap = cur_gap

    
        for i in range(k + 1, n + 1):
            cur_gap += gap[i] - gap[i - k - 1]
            max_gap = max(max_gap, cur_gap)

        return max_gap
10/07
# 3440. Reschedule Meetings for Maximum Free Time II
class Solution(object):
    def maxFreeTime(self, eventTime, startTime, endTime):
        """
        :type eventTime: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        
        gaps = [0] * (n + 1)
        gaps[0] = startTime[0]
        for i in range(1, n):
            gaps[i] = startTime[i] - endTime[i - 1]
        gaps[n] = eventTime - endTime[n - 1]

        maxLeft = [0] * (n + 1)
        maxLeft[0] = gaps[0]
        for i in range(1, n + 1):
            maxLeft[i] = max(maxLeft[i - 1], gaps[i])

        maxRight = [0] * (n + 1)
        maxRight[n] = gaps[n]
        for i in range(n - 1, -1, -1):
            maxRight[i] = max(maxRight[i + 1], gaps[i])

        res = 0
        for i in range(n):
            duration = endTime[i] - startTime[i]
            gap_sum = gaps[i] + gaps[i + 1]

            bestGap = 0
            if i > 0:
                bestGap = max(bestGap, maxLeft[i - 1])
            if i + 2 <= n:
                bestGap = max(bestGap, maxRight[i + 2])

            if duration <= bestGap:
                res = max(res, gap_sum + duration)
            else:
                res = max(res, gap_sum)

        return res
11/07
# 2402. Meeting Rooms III
import heapq

class Solution:
    def mostBooked(self, n, meetings):
        meetings.sort()
        free_rooms = list(range(n))
        busy_rooms = []
        count = [0] * n
        
        for start, end in meetings:
            while busy_rooms and busy_rooms[0][0] <= start:
                _, room = heapq.heappop(busy_rooms)
                heapq.heappush(free_rooms, room)
            
            if free_rooms:
                room = heapq.heappop(free_rooms)
            else:
                end_time, room = heapq.heappop(busy_rooms)
                end += end_time - start
            
            heapq.heappush(busy_rooms, (end, room))
            count[room] += 1
        
        max_booked = max(count)
        for i in range(n):
            if count[i] == max_booked:
                return i
12/07
# 1900. The Earliest and Latest Rounds Where Players Compete

class Solution(object):
    def earliestAndLatest(self, n, firstPlayer, secondPlayer):
        """
        :type n: int
        :type firstPlayer: int
        :type secondPlayer: int
        :rtype: List[int]
        """
        memo = {}

        def dfs(players):
            key = tuple(players)
            if key in memo:
                return memo[key]

            left, right = 0, len(players) - 1
            while left < right:
                a, b = players[left], players[right]
                if (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return (1, 1)
                left += 1
                right -= 1

            results = []
            def build_next(i, j, new_players):
                if i > j:
                    results.append(tuple(sorted(new_players)))
                    return
                if i == j:
                    build_next(i + 1, j - 1, new_players + [players[i]])
                    return

                a, b = players[i], players[j]
                if (a == firstPlayer or a == secondPlayer) and (b != firstPlayer and b != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [a])
                elif (b == firstPlayer or b == secondPlayer) and (a != firstPlayer and a != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [b])
                elif (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return
                else:
                    build_next(i + 1, j - 1, new_players + [a])
                    build_next(i + 1, j - 1, new_players + [b])

            build_next(0, len(players) - 1, [])

            earliest = float('inf')
            latest = float('-inf')
            for nxt in results:
                e, l = dfs(nxt)
                earliest = min(earliest, e + 1)
                latest = max(latest, l + 1)

            memo[key] = (earliest, latest)
            return memo[key]

        return list(dfs(tuple(range(1, n + 1))))
13/07
# 2410. Maximum Matching of Players With Trainers

class Solution(object):
    def matchPlayersAndTrainers(self, players, trainers):
        """
        :type players: List[int]
        :type trainers: List[int]
        :rtype: int
        """
        players.sort()
        trainers.sort()
        
        i = j = 0
        match_count = 0

        while i < len(players) and j < len(trainers):
            if players[i] <= trainers[j]:
                match_count += 1
                i += 1
                j += 1
            else:
                j += 1

        return match_count
14/07
# 1290. Convert Binary Number in a Linked List to Integer

class Solution(object):
    def getDecimalValue(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: int
        """
        num = 0
        while head:
            num = (num << 1) | head.val  
            head = head.next
        return num
15/07
# 3136. Valid Word
class Solution(object):
    def isValid(self, word):
        """
        :type word: str
        :rtype: bool
        """
        if len(word) < 3:
            return False

        vowels = set('aeiouAEIOU')
        has_vowel = False
        has_consonant = False

        for char in word:
            if not char.isalnum():
                return False
            if char.isalpha():
                if char in vowels:
                    has_vowel = True
                else:
                    has_consonant = True

        return has_vowel and has_consonant




