30/06/25
# 316 Remove Duplicate Letters:
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        last_index = {}
        for i in range(len(s)):
            last_index[s[i]] = i

        result = []
        seen = set()

        for i in range(len(s)):
            c = s[i]
            if c not in seen:
                while result and c < result[-1] and i < last_index[result[-1]]:
                    seen.remove(result.pop())
                result.append(c)
                seen.add(c)

        return ''.join(result)
01/07/25
# 321. Create Maximum Number
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
        def maxSubsequence(nums, t):
            stack = []
            drop = len(nums) - t
            for num in nums:
                while drop and stack and stack[-1] < num:
                    stack.pop()
                    drop -= 1
                stack.append(num)
            return stack[:t]

        def merge(seq1, seq2):
            res = []
            while seq1 or seq2:
                if seq1 > seq2:
                    res.append(seq1.pop(0))
                else:
                    res.append(seq2.pop(0))
            return res

        best = []
        for i in range(max(0, k - len(nums2)), min(k, len(nums1)) + 1):
            seq1 = maxSubsequence(nums1, i)
            seq2 = maxSubsequence(nums2, k - i)
            merged = merge(seq1[:], seq2[:]) 
            if merged > best:
                best = merged
        return best
02/07/25
#3333. Find the Original Typed String II
class Solution:
    MOD = 10**9 + 7

    def possibleStringCount(self, word: str, k: int) -> int:
        if not word:
            return 0

        groups = []
        count = 1
        for i in range(1, len(word)):
            if word[i] == word[i - 1]:
                count += 1
            else:
                groups.append(count)
                count = 1
        groups.append(count)

        total = 1
        for num in groups:
            total = (total * num) % self.MOD

        if k <= len(groups):
            return total

        dp = [0] * k
        dp[0] = 1

        for num in groups:
            new_dp = [0] * k
            sum_val = 0
            for s in range(k):
                if s > 0:
                    sum_val = (sum_val + dp[s - 1]) % self.MOD
                if s > num:
                    sum_val = (sum_val - dp[s - num - 1] + self.MOD) % self.MOD
                new_dp[s] = sum_val
            dp = new_dp

        invalid = sum(dp[len(groups):k]) % self.MOD
        return (total - invalid + self.MOD) % self.MOD
#324. Wiggle Sort II
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: None. Modifies nums in-place.
        """
        n = len(nums)
        nums.sort()

        half = (n + 1) // 2
        small = nums[:half][::-1]  
        large = nums[half:][::-1] 

        for i in range(n):
            if i % 2 == 0:
                nums[i] = small[i // 2]
            else:
                nums[i] = large[i // 2]
03/07
# 3304. Find the K-th Character in String Game I
class Solution(object):
    def kthCharacter(self, k):
        """
        :type k: int
        :rtype: str
        """
        word = "a"
        
        while len(word) < k:
            next_part = ""
            for c in word:
                next_char = chr((ord(c) - ord('a') + 1) % 26 + ord('a'))
                next_part += next_char
            word += next_part
        
        return word[k - 1]

04/07
# 334. Increasing Triplet Subsequence
class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        first = float('inf')
        second = float('inf')

        for num in nums:
            if num <= first:
                first = num  
            elif num <= second:
                second = num  
            else:
                return True

        return False
# 376. Wiggle Subsequence
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0

        n = len(nums)
        up = 1
        down = 1

        for i in range(1, n):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1

        return max(up, down)
05/07
# 1394. Find Lucky Integer in an Array
class Solution(object):
    def findLucky(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        from collections import Counter

        freq = Counter(arr)
        result = -1

        for num in freq:
            if freq[num] == num:
                result = max(result, num)

        return result
06/07
# 1865. Finding Pairs With a Certain Sum
from collections import Counter

class FindSumPairs(object):

    def __init__(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        """
        self.nums1 = nums1
        self.nums2 = nums2
        self.freq2 = Counter(nums2)

    def add(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        old_val = self.nums2[index]
        self.freq2[old_val] -= 1
        if self.freq2[old_val] == 0:
            del self.freq2[old_val]
        
        self.nums2[index] += val
        new_val = self.nums2[index]
        self.freq2[new_val] += 1

    def count(self, tot):
        """
        :type tot: int
        :rtype: int
        """
        count = 0
        for num in self.nums1:
            complement = tot - num
            count += self.freq2.get(complement, 0)
        return count

07/05
# 397. Integer Replacement
class Solution(object):
    def integerReplacement(self, n):
        """
        :type n: int
        :rtype: int
        """
        memo = {}

        def helper(x):
            if x == 1:
                return 0
            if x in memo:
                return memo[x]
            if x % 2 == 0:
                memo[x] = 1 + helper(x // 2)
            else:
                memo[x] = 1 + min(helper(x + 1), helper(x - 1))
            return memo[x]

        return helper(n)

# 402. Remove K Digits
class Solution(object):
    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        stack = []

        for digit in num:
            while stack and k > 0 and stack[-1] > digit:
                stack.pop()
                k -= 1
            stack.append(digit)
        while k > 0:
            stack.pop()
            k -= 1
        result = ''.join(stack).lstrip('0')

        return result if result else "0"

# 409. Longest Palindrome  
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        from collections import Counter

        count = Counter(s)
        length = 0
        odd_found = False

        for freq in count.values():
            if freq % 2 == 0:
                length += freq
            else:
                length += freq - 1
                odd_found = True

        if odd_found:
            length += 1  

        return length

08/07
# 1751. Maximum Number of Events That Can Be Attended II
class Solution(object):
    def maxValue(self, events, k):
        """
        :type events: List[List[int]]
        :type k: int
        :rtype: int
        """
        events.sort()
        n = len(events)

        # Sort events by start time
        starts = [event[0] for event in events]

        next_event = [0] * n
        for i in range(n):
            lo, hi = i + 1, n
            while lo < hi:
                mid = (lo + hi) // 2
                if events[mid][0] > events[i][1]:
                    hi = mid
                else:
                    lo = mid + 1
            next_event[i] = lo

        dp = [[0] * (k + 1) for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            for j in range(1, k + 1):
                # Skip current event
                skip = dp[i + 1][j]
                # Take current event
                take = events[i][2] + dp[next_event[i]][j - 1]
                dp[i][j] = max(skip, take)

        return dp[0][k]

09/07
# 3439. Reschedule Meetings for Maximum Free Time I

class Solution(object):
    def maxFreeTime(self, eventTime, k, startTime, endTime):
        """
        :type eventTime: int
        :type k: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        gap = [0] * (n + 1)

        
        gap[0] = startTime[0]

        
        for i in range(1, n):
            gap[i] = startTime[i] - endTime[i - 1]


        gap[n] = eventTime - endTime[n - 1]

        
        cur_gap = sum(gap[i] for i in range(min(k + 1, n + 1)))
        max_gap = cur_gap

    
        for i in range(k + 1, n + 1):
            cur_gap += gap[i] - gap[i - k - 1]
            max_gap = max(max_gap, cur_gap)

        return max_gap
10/07
# 3440. Reschedule Meetings for Maximum Free Time II
class Solution(object):
    def maxFreeTime(self, eventTime, startTime, endTime):
        """
        :type eventTime: int
        :type startTime: List[int]
        :type endTime: List[int]
        :rtype: int
        """
        n = len(startTime)
        
        gaps = [0] * (n + 1)
        gaps[0] = startTime[0]
        for i in range(1, n):
            gaps[i] = startTime[i] - endTime[i - 1]
        gaps[n] = eventTime - endTime[n - 1]

        maxLeft = [0] * (n + 1)
        maxLeft[0] = gaps[0]
        for i in range(1, n + 1):
            maxLeft[i] = max(maxLeft[i - 1], gaps[i])

        maxRight = [0] * (n + 1)
        maxRight[n] = gaps[n]
        for i in range(n - 1, -1, -1):
            maxRight[i] = max(maxRight[i + 1], gaps[i])

        res = 0
        for i in range(n):
            duration = endTime[i] - startTime[i]
            gap_sum = gaps[i] + gaps[i + 1]

            bestGap = 0
            if i > 0:
                bestGap = max(bestGap, maxLeft[i - 1])
            if i + 2 <= n:
                bestGap = max(bestGap, maxRight[i + 2])

            if duration <= bestGap:
                res = max(res, gap_sum + duration)
            else:
                res = max(res, gap_sum)

        return res
11/07
# 2402. Meeting Rooms III
import heapq

class Solution:
    def mostBooked(self, n, meetings):
        meetings.sort()
        free_rooms = list(range(n))
        busy_rooms = []
        count = [0] * n
        
        for start, end in meetings:
            while busy_rooms and busy_rooms[0][0] <= start:
                _, room = heapq.heappop(busy_rooms)
                heapq.heappush(free_rooms, room)
            
            if free_rooms:
                room = heapq.heappop(free_rooms)
            else:
                end_time, room = heapq.heappop(busy_rooms)
                end += end_time - start
            
            heapq.heappush(busy_rooms, (end, room))
            count[room] += 1
        
        max_booked = max(count)
        for i in range(n):
            if count[i] == max_booked:
                return i
12/07
# 1900. The Earliest and Latest Rounds Where Players Compete

class Solution(object):
    def earliestAndLatest(self, n, firstPlayer, secondPlayer):
        """
        :type n: int
        :type firstPlayer: int
        :type secondPlayer: int
        :rtype: List[int]
        """
        memo = {}

        def dfs(players):
            key = tuple(players)
            if key in memo:
                return memo[key]

            left, right = 0, len(players) - 1
            while left < right:
                a, b = players[left], players[right]
                if (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return (1, 1)
                left += 1
                right -= 1

            results = []
            def build_next(i, j, new_players):
                if i > j:
                    results.append(tuple(sorted(new_players)))
                    return
                if i == j:
                    build_next(i + 1, j - 1, new_players + [players[i]])
                    return

                a, b = players[i], players[j]
                if (a == firstPlayer or a == secondPlayer) and (b != firstPlayer and b != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [a])
                elif (b == firstPlayer or b == secondPlayer) and (a != firstPlayer and a != secondPlayer):
                    build_next(i + 1, j - 1, new_players + [b])
                elif (a == firstPlayer and b == secondPlayer) or (a == secondPlayer and b == firstPlayer):
                    return
                else:
                    build_next(i + 1, j - 1, new_players + [a])
                    build_next(i + 1, j - 1, new_players + [b])

            build_next(0, len(players) - 1, [])

            earliest = float('inf')
            latest = float('-inf')
            for nxt in results:
                e, l = dfs(nxt)
                earliest = min(earliest, e + 1)
                latest = max(latest, l + 1)

            memo[key] = (earliest, latest)
            return memo[key]

        return list(dfs(tuple(range(1, n + 1))))
13/07
# 2410. Maximum Matching of Players With Trainers

class Solution(object):
    def matchPlayersAndTrainers(self, players, trainers):
        """
        :type players: List[int]
        :type trainers: List[int]
        :rtype: int
        """
        players.sort()
        trainers.sort()
        
        i = j = 0
        match_count = 0

        while i < len(players) and j < len(trainers):
            if players[i] <= trainers[j]:
                match_count += 1
                i += 1
                j += 1
            else:
                j += 1

        return match_count
14/07
# 1290. Convert Binary Number in a Linked List to Integer

class Solution(object):
    def getDecimalValue(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: int
        """
        num = 0
        while head:
            num = (num << 1) | head.val  
            head = head.next
        return num
15/07
# 3136. Valid Word
class Solution(object):
    def isValid(self, word):
        """
        :type word: str
        :rtype: bool
        """
        if len(word) < 3:
            return False

        vowels = set('aeiouAEIOU')
        has_vowel = False
        has_consonant = False

        for char in word:
            if not char.isalnum():
                return False
            if char.isalpha():
                if char in vowels:
                    has_vowel = True
                else:
                    has_consonant = True

        return has_vowel and has_consonant
16/07
# 3201. Find the Maximum Length of Valid Subsequence I
class Solution(object):
    def maximumLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        cnt_even = cnt_odd = 0     
        dp_even  = dp_odd  = 0     
        
        for num in nums:
            if num & 1:            
                cnt_odd += 1
                dp_odd  = max(dp_odd, dp_even + 1)
            else:                  
                cnt_even += 1
                dp_even = max(dp_even, dp_odd + 1)
        
        len_same = max(cnt_even, cnt_odd)     
        len_alt  = max(dp_even, dp_odd)       
        
        return max(len_same, len_alt)
17/07
# 3202. Find the Maximum Length of Valid Subsequence II
 class Solution(object):
    def maximumLength(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(nums)
        dp = [{} for _ in range(n)]
        max_len = 1  

        for i in range(n):
            for j in range(i):
                r = (nums[j] + nums[i]) % k
                prev_len = dp[j].get(r, 1)  
                dp[i][r] = max(dp[i].get(r, 1), prev_len + 1)
                max_len = max(max_len, dp[i][r])

        return max_len

18/07
# 2163. Minimum Difference in Sums After Removal of Elements
import heapq

class Solution(object):
    def minimumDifference(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums) // 3
        total_len = len(nums)
        
        max_heap = []
        prefix_sum = [0] * total_len
        curr_sum = sum(nums[:n])
        heapq.heapify(max_heap)
        for i in range(n):
            heapq.heappush(max_heap, -nums[i])
        prefix_sum[n - 1] = curr_sum
        
        for i in range(n, 2 * n):
            curr_sum += nums[i]
            heapq.heappush(max_heap, -nums[i])
            curr_sum += heapq.heappop(max_heap)
            prefix_sum[i] = curr_sum
        
        min_heap = []
        suffix_sum = [0] * total_len
        curr_sum = sum(nums[-n:])
        heapq.heapify(min_heap)
        for i in range(total_len - 1, total_len - n - 1, -1):
            heapq.heappush(min_heap, nums[i])
        suffix_sum[2 * n] = curr_sum
        
        for i in range(2 * n - 1, n - 1, -1):
            curr_sum += nums[i]
            heapq.heappush(min_heap, nums[i])
            curr_sum -= heapq.heappop(min_heap)
            suffix_sum[i] = curr_sum
        
        min_diff = float('inf')
        for i in range(n - 1, 2 * n):
            min_diff = min(min_diff, prefix_sum[i] - suffix_sum[i + 1])
        
        return min_diff
# 420. Strong Password Checker
class Solution(object):
    def strongPasswordChecker(self, password):
        """
        :type password: str
        :rtype: int
        """
        missing_lower = 1
        missing_upper = 1
        missing_digit = 1

        for c in password:
            if c.islower():
                missing_lower = 0
            elif c.isupper():
                missing_upper = 0
            elif c.isdigit():
                missing_digit = 0

        missing_types = missing_lower + missing_upper + missing_digit
        n = len(password)

        repeats = []
        i = 2
        while i < n:
            if password[i] == password[i - 1] == password[i - 2]:
                start = i - 2
                while i < n and password[i] == password[i - 1]:
                    i += 1
                repeats.append(i - start)
            else:
                i += 1

        total_replace = sum(length // 3 for length in repeats)

        if n < 6:
            return max(missing_types, 6 - n)

        elif n <= 20:
            return max(missing_types, total_replace)

        over = n - 20
        remaining_replace = total_replace
        buckets = [0] * 3

        for r in repeats:
            buckets[r % 3] += 1
        for i in range(3):
            if i == 0:
                usable = min(over, buckets[0])
                over -= usable
                remaining_replace -= usable
                buckets[0] -= usable
            elif i == 1:
                usable = min(over // 2, buckets[1])
                over -= usable * 2
                remaining_replace -= usable
                buckets[1] -= usable
            elif i == 2:
                usable = min(over // 3, buckets[2])
                over -= usable * 3
                remaining_replace -= usable
                buckets[2] -= usable

        remaining_replace = max(0, remaining_replace - over // 3)

        return (n - 20) + max(missing_types, remaining_replace)

19/07
# 1233. Remove Sub-Folders from the Filesystem
class Solution(object):
    def removeSubfolders(self, folder):
        """
        :type folder: List[str]
        :rtype: List[str]
        """
        folder.sort()
        result = []

        for f in folder:
            if not result or not f.startswith(result[-1] + "/"):
                result.append(f)

        return result
20/07
# 1948. Delete Duplicate Folders in System
from collections import defaultdict

class TrieNode:
    def __init__(self):
        self.children = {}
        self.path = []
        self.serial = ""
        self.to_delete = False

class Solution(object):
    def deleteDuplicateFolder(self, paths):
        """
        :type paths: List[List[str]]
        :rtype: List[List[str]]
        """
        root = TrieNode()
        
        for path in paths:
            node = root
            for folder in path:
                if folder not in node.children:
                    node.children[folder] = TrieNode()
                node = node.children[folder]
            node.path = path
        
        serial_map = defaultdict(list)
        
        def serialize(node):
            if not node.children:
                return ""
            items = []
            for name in sorted(node.children):
                child = node.children[name]
                items.append(name + '(' + serialize(child) + ')')
            node.serial = ''.join(items)
            serial_map[node.serial].append(node)
            return node.serial
        
        serialize(root)

        for nodes in serial_map.values():
            if len(nodes) > 1:
                for node in nodes:
                    node.to_delete = True
        
        res = []
        def collect(node, path):
            for name, child in node.children.items():
                if not child.to_delete:
                    new_path = path + [name]
                    res.append(new_path)
                    collect(child, new_path)
        
        collect(root, [])
        return res
# 435. Non-overlapping Intervals

class Solution(object):
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        if not intervals:
            return 0

        intervals.sort(key=lambda x: x[1])

        count_non_overlapping = 1  
        end = intervals[0][1]

        for i in range(1, len(intervals)):
            if intervals[i][0] >= end:
                count_non_overlapping += 1
                end = intervals[i][1]
        return len(intervals) - count_non_overlapping

21/07
# 1957. Delete Characters to Make Fancy String
class Solution(object):
    def makeFancyString(self, s):
        """
        :type s: str
        :rtype: str
        """
        result = []
        count = 1  

        for i in range(len(s)):
            if i > 0 and s[i] == s[i - 1]:
                count += 1
            else:
                count = 1
            if count < 3:
                result.append(s[i])

        return "".join(result)
22/07
# 1695. Maximum Erasure Value

class Solution(object):
    def maximumUniqueSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        seen = set()
        left = 0
        current_sum = 0
        max_sum = 0

        for right in range(len(nums)):
            while nums[right] in seen:
                seen.remove(nums[left])
                current_sum -= nums[left]
                left += 1
            seen.add(nums[right])
            current_sum += nums[right]
            max_sum = max(max_sum, current_sum)
        
        return max_sum

23/07
# 1717. Maximum Score From Removing Substrings

class Solution(object):
    def maximumGain(self, s, x, y):
        """
        :type s: str
        :type x: int
        :type y: int
        :rtype: int
        """

        def remove_pair(s, first, second, score):
            stack = []
            total = 0
            for ch in s:
                if stack and stack[-1] == first and ch == second:
                    stack.pop()
                    total += score
                else:
                    stack.append(ch)
            return "".join(stack), total

        if x > y:
            s, gain1 = remove_pair(s, 'a', 'b', x)
            s, gain2 = remove_pair(s, 'b', 'a', y)
        else:
            s, gain1 = remove_pair(s, 'b', 'a', y)
            s, gain2 = remove_pair(s, 'a', 'b', x)

        return gain1 + gain2

24/07
# 2322. Minimum Score After Removals on a Tree
class Solution(object):
    def minimumScore(self, nums, edges):
        """
        :type nums: List[int]
        :type edges: List[List[int]]
        :rtype: int
        """
        from collections import defaultdict

        n = len(nums)
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        parent = [-1] * n
        xor = nums[:]
        def dfs(node, par):
            for nei in graph[node]:
                if nei != par:
                    parent[nei] = node
                    dfs(nei, node)
                    xor[node] ^= xor[nei]
        dfs(0, -1)

        in_time = [0] * n
        out_time = [0] * n
        time = [0]
        def dfs_time(node, par):
            time[0] += 1
            in_time[node] = time[0]
            for nei in graph[node]:
                if nei != par:
                    dfs_time(nei, node)
            time[0] += 1
            out_time[node] = time[0]
        dfs_time(0, -1)

        def is_ancestor(u, v):
            return in_time[u] < in_time[v] and out_time[v] < out_time[u]

        answer = float('inf')
        edge_nodes = [v if parent[v] == u else u for u, v in edges]
        for i in range(len(edge_nodes)):
            for j in range(i + 1, len(edge_nodes)):
                a, b = edge_nodes[i], edge_nodes[j]
                if is_ancestor(a, b):
                    comp1 = xor[b]
                    comp2 = xor[a] ^ xor[b]
                    comp3 = xor[0] ^ xor[a]
                elif is_ancestor(b, a):
                    comp1 = xor[a]
                    comp2 = xor[b] ^ xor[a]
                    comp3 = xor[0] ^ xor[b]
                else:
                    comp1 = xor[a]
                    comp2 = xor[b]
                    comp3 = xor[0] ^ xor[a] ^ xor[b]
                values = [comp1, comp2, comp3]
                answer = min(answer, max(values) - min(values))
        return answer
# 452. Minimum Number of Arrows to Burst Balloons 

class Solution(object):
    def findMinArrowShots(self, points):
        if not points:
            return 0

        points.sort(key=lambda x: x[1])

        arrows = 1
        end = points[0][1]

        for i in range(1, len(points)):
            if points[i][0] > end:
                arrows += 1
                end = points[i][1]

        return arrows

# 455. Assign Cookies

class Solution(object):
    def findContentChildren(self, g, s):
        """
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """
        g.sort()
        s.sort()

        child = 0  
        cookie = 0 

        while child < len(g) and cookie < len(s):
            if s[cookie] >= g[child]:  
                child += 1  
            cookie += 1  

        return child  

# 502. IPO

import heapq

class Solution(object):
    def findMaximizedCapital(self, k, w, profits, capital):
        # Pair up capital and profits
        projects = sorted(zip(capital, profits))
        n = len(projects)
        max_heap = []
        i = 0

        for _ in range(k):
            while i < n and projects[i][0] <= w:
                heapq.heappush(max_heap, -projects[i][1])
                i += 1

            if not max_heap:
                break

            w += -heapq.heappop(max_heap)

        return w

# 517. Super Washing Machines

class Solution(object):
    def findMinMoves(self, machines):
        """
        :type machines: List[int]
        :rtype: int
        """
        total = sum(machines)
        n = len(machines)

        if total % n != 0:
            return -1
        
        target = total // n
        cum_sum = 0
        max_moves = 0

        for load in machines:
            diff = load - target  
            cum_sum += diff      
            max_moves = max(max_moves, abs(cum_sum), diff)

        return max_moves
25/07
# 3487. Maximum Unique Subarray Sum After Deletion

class Solution:
    def maxSum(self, nums):
        s = set(nums)
        result = sum(x for x in s if x > 0)
        if result == 0:
            result = max(s)
        return result

26/07
# 3480. Maximize Subarrays After Removing One Conflicting Pair

class Solution(object):
    def maxSubarrays(self, n, conflictingPairs):
        """
        :type n: int
        :type conflictingPairs: List[List[int]]
        :rtype: int
        """
        right = [[] for _ in range(n + 1)]

        for a, b in conflictingPairs:
            right[max(a, b)].append(min(a, b))

        ans = 0
        left = [0, 0]  
        bonus = [0] * (n + 1)

        for r in range(1, n + 1):
            for l in right[r]:
                left = self.maxPair(left, [l, left[0]], [left[0], l])
            ans += r - left[0]
            bonus[left[0]] += left[0] - left[1]

        return ans + max(bonus)

    def maxPair(self, pair1, pair2, pair3):
        max_pair = pair1
        for curr in [pair2, pair3]:
            if curr[0] > max_pair[0] or (curr[0] == max_pair[0] and curr[1] > max_pair[1]):
                max_pair = curr
        return max_pair

27/07
# 2210. Count Hills and Valleys in an Array

class Solution(object):
    def countHillValley(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        filtered = [nums[0]]
        for i in range(1, len(nums)):
            if nums[i] != nums[i - 1]:
                filtered.append(nums[i])
        
        count = 0
        for i in range(1, len(filtered) - 1):
            if filtered[i] > filtered[i - 1] and filtered[i] > filtered[i + 1]:
                count += 1  
            elif filtered[i] < filtered[i - 1] and filtered[i] < filtered[i + 1]:
                count += 1  
        
        return count

# 561. Array Partition

class Solution(object):
    def arrayPairSum(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        max_sum = 0
        for i in range(0, len(nums), 2):
            max_sum += nums[i]
        return max_sum

# 581. Shortest Unsorted Continuous Subarray

class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        sorted_nums = sorted(nums)
        start, end = 0, len(nums) - 1

        while start < len(nums) and nums[start] == sorted_nums[start]:
            start += 1
        
        while end > start and nums[end] == sorted_nums[end]:
            end -= 1

        return end - start + 1 if end > start else 0

28/07
# 2044. Count Number of Maximum Bitwise-OR Subsets

class Solution(object):
    def countMaxOrSubsets(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        max_or = 0
        for num in nums:
            max_or |= num  
        self.count = 0  

        def dfs(index, current_or):
            if index == len(nums):
                if current_or == max_or:
                    self.count += 1
                return

            dfs(index + 1, current_or | nums[index])

            dfs(index + 1, current_or)

        dfs(0, 0)
        return self.count
29/07
# 2411. Smallest Subarrays With Maximum Bitwise OR

class Solution(object):
    def smallestSubarrays(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        n = len(nums)
        answer = [1] * n
        last = [0] * 32

        for i in range(n - 1, -1, -1):
            for b in range(32):
                if nums[i] & (1 << b):
                    last[b] = i

            farthest = i
            for b in range(32):
                if last[b] > farthest:
                    farthest = last[b]

            answer[i] = farthest - i + 1

        return answer
30/07
# 2419. Longest Subarray With Maximum Bitwise AND

class Solution(object):
    def longestSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_val = max(nums)
        
        longest = 0
        current = 0
        
        for num in nums:
            if num == max_val:
                current += 1
                longest = max(longest, current)
            else:
                current = 0
        
        return longest
31/07
# 898. Bitwise ORs of Subarrays

class Solution(object):
    def subarrayBitwiseORs(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        result = set()    
        current = set()    
        for num in arr:
            current = {num | x for x in current} | {num}
            result |= current  

        return len(result)
01/08
# 118. Pascal's Triangle

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        triangle = []
        
        for row_num in range(numRows):
            row = [1] * (row_num + 1)
            
            for j in range(1, row_num):
                row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j]
            
            triangle.append(row)
        
        return triangle
02/08
# 2561. Rearranging Fruits

from collections import Counter

class Solution(object):
    def minCost(self, basket1, basket2):
        """
        :type basket1: List[int]
        :type basket2: List[int]
        :rtype: int
        """
        count1 = Counter(basket1)
        count2 = Counter(basket2)
        
        total_count = Counter()
        for k in count1:
            total_count[k] += count1[k]
        for k in count2:
            total_count[k] += count2[k]

        for k in total_count:
            if total_count[k] % 2 != 0:
                return -1

        extra1 = []
        extra2 = []
        for fruit in total_count:
            c1 = count1.get(fruit, 0)
            c2 = count2.get(fruit, 0)
            diff = abs(c1 - c2) // 2
            if c1 > c2:
                extra1.extend([fruit] * diff)
            elif c2 > c1:
                extra2.extend([fruit] * diff)

        if len(extra1) != len(extra2):
            return -1

        extra1.sort()
        extra2.sort(reverse=True)

        min_fruit = min(min(basket1), min(basket2))
        cost = 0
        for a, b in zip(extra1, extra2):
            cost += min(min(a, b), 2 * min_fruit)

        return cost
# 624. Maximum Distance in Arrays

class Solution(object):
    def maxDistance(self, arrays):
        """
        :type arrays: List[List[int]]
        :rtype: int
        """
        min_val = arrays[0][0]
        max_val = arrays[0][-1]
        max_distance = 0

        for i in range(1, len(arrays)):
            curr_min = arrays[i][0]
            curr_max = arrays[i][-1]
            
            max_distance = max(
                max_distance,
                abs(curr_max - min_val),
                abs(max_val - curr_min)
            )

            min_val = min(min_val, curr_min)
            max_val = max(max_val, curr_max)

        return max_distance
# 630. Course Schedule III 

import heapq

class Solution(object):
    def scheduleCourse(self, courses):
        """
        :type courses: List[List[int]]
        :rtype: int
        """
        courses.sort(key=lambda x: x[1])
        
        total_time = 0
        max_heap = []

        for duration, last_day in courses:
            total_time += duration
            heapq.heappush(max_heap, -duration) 

            if total_time > last_day:
                longest = -heapq.heappop(max_heap)
                total_time -= longest

        return len(max_heap)
# 632. Smallest Range Covering Elements from K Lists

import heapq

class Solution(object):
    def smallestRange(self, nums):
        """
        :type nums: List[List[int]]
        :rtype: List[int]
        """
        heap = []
        current_max = float('-inf')

        for i in range(len(nums)):
            val = nums[i][0]
            heapq.heappush(heap, (val, i, 0))
            current_max = max(current_max, val)

        best_range = [float('-inf'), float('inf')]

        while True:
            min_val, row, col = heapq.heappop(heap)

            if current_max - min_val < best_range[1] - best_range[0] or \
               (current_max - min_val == best_range[1] - best_range[0] and min_val < best_range[0]):
                best_range = [min_val, current_max]

            if col + 1 < len(nums[row]):
                next_val = nums[row][col + 1]
                heapq.heappush(heap, (next_val, row, col + 1))
                current_max = max(current_max, next_val)
            else:
                break

        return best_range







